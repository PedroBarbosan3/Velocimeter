
ProjectGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009580  08009580  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009580  08009580  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009580  08009580  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  20000074  080095fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  080095fc  0002124c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204c1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f6a  00000000  00000000  00040565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  000444d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00045f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d24a  00000000  00000000  00047788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad77  00000000  00000000  000749d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117328  00000000  00000000  0008f749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a6a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007380  00000000  00000000  001a6ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009420 	.word	0x08009420

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009420 	.word	0x08009420

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	20000144 	.word	0x20000144

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b20      	cmp	r3, #32
 8000414:	d101      	bne.n	800041a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000416:	2301      	movs	r3, #1
 8000418:	e000      	b.n	800041c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d101      	bne.n	8000440 <LL_USART_IsActiveFlag_TXE+0x18>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 0220 	orr.w	r2, r3, #32
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	460b      	mov	r3, r1
 80004d4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	4907      	ldr	r1, [pc, #28]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000526:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <sendchar>:
uint16_t temp;

int power = 0;
int generator = 0;

void sendchar(char c, char usart){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10b      	bne.n	80005aa <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <sendchar+0x54>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	2300      	movs	r3, #0
 800059a:	f04f 32ff 	mov.w	r2, #4294967295
 800059e:	f006 fa13 	bl	80069c8 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <sendchar+0x58>)
 80005a4:	f7ff ff63 	bl	800046e <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 80005a8:	e00d      	b.n	80005c6 <sendchar+0x4a>
	else if( usart == USART_2){
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d10a      	bne.n	80005c6 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <sendchar+0x5c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	2300      	movs	r3, #0
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295
 80005bc:	f006 fa04 	bl	80069c8 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <sendchar+0x60>)
 80005c2:	f7ff ff54 	bl	800046e <LL_USART_EnableIT_TXE>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200011e8 	.word	0x200011e8
 80005d4:	40013800 	.word	0x40013800
 80005d8:	20001190 	.word	0x20001190
 80005dc:	40004400 	.word	0x40004400

080005e0 <sendString>:

void sendString(char * str, char usart){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 80005ec:	e009      	b.n	8000602 <sendString+0x22>
		sendchar(*str, usart);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffc0 	bl	800057c <sendchar>
		str++;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f1      	bne.n	80005ee <sendString+0xe>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <read_voltageUNO>:

uint16_t read_voltageUNO(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <read_voltageUNO+0x2c>)
 800061c:	f001 fba0 	bl	8001d60 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000620:	f04f 31ff 	mov.w	r1, #4294967295
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <read_voltageUNO+0x2c>)
 8000626:	f001 fc55 	bl	8001ed4 <HAL_ADC_PollForConversion>

	uint16_t input = HAL_ADC_GetValue(&hadc1);
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <read_voltageUNO+0x2c>)
 800062c:	f001 fd2a 	bl	8002084 <HAL_ADC_GetValue>
 8000630:	4603      	mov	r3, r0
 8000632:	80fb      	strh	r3, [r7, #6]

	return input;
 8000634:	88fb      	ldrh	r3, [r7, #6]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000112c 	.word	0x2000112c

08000644 <read_voltageDUO>:

uint16_t read_voltageDUO(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <read_voltageDUO+0x2c>)
 800064c:	f001 fb88 	bl	8001d60 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000650:	f04f 31ff 	mov.w	r1, #4294967295
 8000654:	4806      	ldr	r0, [pc, #24]	; (8000670 <read_voltageDUO+0x2c>)
 8000656:	f001 fc3d 	bl	8001ed4 <HAL_ADC_PollForConversion>

	uint16_t input = HAL_ADC_GetValue(&hadc2);
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <read_voltageDUO+0x2c>)
 800065c:	f001 fd12 	bl	8002084 <HAL_ADC_GetValue>
 8000660:	4603      	mov	r3, r0
 8000662:	80fb      	strh	r3, [r7, #6]

	return input;
 8000664:	88fb      	ldrh	r3, [r7, #6]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20001074 	.word	0x20001074

08000674 <pont>:
//}

uint16_t temp1 = 0;
uint16_t temp2 = 0;

void pont(void * vParam){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	//char buff1[13];
	while(1){
		temp1 = read_voltageUNO();
 800067c:	f7ff ffca 	bl	8000614 <read_voltageUNO>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <pont+0x24>)
 8000686:	801a      	strh	r2, [r3, #0]
		temp2 = read_voltageDUO();
 8000688:	f7ff ffdc 	bl	8000644 <read_voltageDUO>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <pont+0x28>)
 8000692:	801a      	strh	r2, [r3, #0]
		temp1 = read_voltageUNO();
 8000694:	e7f2      	b.n	800067c <pont+0x8>
 8000696:	bf00      	nop
 8000698:	2000034c 	.word	0x2000034c
 800069c:	2000034e 	.word	0x2000034e

080006a0 <print_scanner>:
//	}
//	sprintf(buff1,"%d\r\n", temp);
//	sendString(buff1, USART_2);
//}

void print_scanner(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
	char buff1[26];
	//uint16_t tempS = temp1+temp2;
	sprintf(buff1,"%d\r\n", temp1 + temp2);
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <print_scanner+0x30>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <print_scanner+0x34>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	441a      	add	r2, r3
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <print_scanner+0x38>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f008 fafe 	bl	8008cb8 <siprintf>
	sendString(buff1, USART_2);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff8d 	bl	80005e0 <sendString>
}
 80006c6:	bf00      	nop
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000034c 	.word	0x2000034c
 80006d4:	2000034e 	.word	0x2000034e
 80006d8:	08009444 	.word	0x08009444

080006dc <ledOff>:
//	uint16_t temp = read_voltageDUO();
//	sprintf(buff2,"%d\r\n", temp);
//	sendString(buff2,USART_2);
//}

void ledOff(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	vTaskSuspend(pontTaskHandle);
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <ledOff+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f006 ff57 	bl	8007598 <vTaskSuspend>
	temp1 = 0;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <ledOff+0x2c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	801a      	strh	r2, [r3, #0]
	temp2 = 0;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <ledOff+0x30>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <ledOff+0x34>)
 80006fc:	f002 fc9c 	bl	8003038 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20001194 	.word	0x20001194
 8000708:	2000034c 	.word	0x2000034c
 800070c:	2000034e 	.word	0x2000034e
 8000710:	48000400 	.word	0x48000400

08000714 <ledOn>:

void ledOn(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	vTaskResume(pontTaskHandle);
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <ledOn+0x24>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f006 ffff 	bl	8007720 <vTaskResume>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2101      	movs	r1, #1
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <ledOn+0x28>)
 8000728:	f002 fc86 	bl	8003038 <HAL_GPIO_WritePin>
    sendString("led ligada\r\n",USART_2);
 800072c:	2102      	movs	r1, #2
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <ledOn+0x2c>)
 8000730:	f7ff ff56 	bl	80005e0 <sendString>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20001194 	.word	0x20001194
 800073c:	48000400 	.word	0x48000400
 8000740:	0800944c 	.word	0x0800944c

08000744 <readchar>:
//	generator = FALSE;
//    sendString("gerador desligado\r\n", USART_2);
//    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
//}

char readchar(char usart){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d109      	bne.n	800076c <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <readchar+0x4c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f107 010f 	add.w	r1, r7, #15
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	4618      	mov	r0, r3
 8000766:	f006 fac9 	bl	8006cfc <xQueueReceive>
 800076a:	e00b      	b.n	8000784 <readchar+0x40>
	else if(usart == USART_2)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d108      	bne.n	8000784 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <readchar+0x50>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f107 010f 	add.w	r1, r7, #15
 800077a:	f04f 32ff 	mov.w	r2, #4294967295
 800077e:	4618      	mov	r0, r3
 8000780:	f006 fabc 	bl	8006cfc <xQueueReceive>
	return caracter;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20001070 	.word	0x20001070
 8000794:	20001198 	.word	0x20001198

08000798 <pressButton>:
//		}
//	}
//}


void pressButton(void * vParam) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint16_t count = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	81fb      	strh	r3, [r7, #14]
//			temp2 = 0;
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
//			count = 0;
//			break;
//		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1){
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <pressButton+0x2c>)
 80007aa:	f002 fc2d 	bl	8003008 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d103      	bne.n	80007bc <pressButton+0x24>

			sendString("entrou\r\n",USART_2);
 80007b4:	2102      	movs	r1, #2
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <pressButton+0x30>)
 80007b8:	f7ff ff12 	bl	80005e0 <sendString>
		}
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	48000800 	.word	0x48000800
 80007c8:	0800945c 	.word	0x0800945c

080007cc <cli>:

void cli(void * vParam)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
    uint8_t caracter;
        while(1)
        {
            caracter = readchar(USART_2);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff ffb5 	bl	8000744 <readchar>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
            switch(caracter){
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b73      	cmp	r3, #115	; 0x73
 80007e2:	d006      	beq.n	80007f2 <cli+0x26>
 80007e4:	2b73      	cmp	r3, #115	; 0x73
 80007e6:	dcf5      	bgt.n	80007d4 <cli+0x8>
 80007e8:	2b66      	cmp	r3, #102	; 0x66
 80007ea:	d008      	beq.n	80007fe <cli+0x32>
 80007ec:	2b6c      	cmp	r3, #108	; 0x6c
 80007ee:	d003      	beq.n	80007f8 <cli+0x2c>
 80007f0:	e008      	b.n	8000804 <cli+0x38>
            case 's':
                print_scanner();
 80007f2:	f7ff ff55 	bl	80006a0 <print_scanner>
                break;
 80007f6:	e005      	b.n	8000804 <cli+0x38>
//            case 'c':
//                pontDUO();
//                break;
            case 'l':
                ledOff();
 80007f8:	f7ff ff70 	bl	80006dc <ledOff>
                break;
 80007fc:	e002      	b.n	8000804 <cli+0x38>
            case 'f':
                ledOn();
 80007fe:	f7ff ff89 	bl	8000714 <ledOn>
                break;
 8000802:	bf00      	nop
            caracter = readchar(USART_2);
 8000804:	e7e6      	b.n	80007d4 <cli+0x8>
	...

08000808 <USART_2_IRQHandler>:
    }
	//caracter = '\0';
}

void USART_2_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 800080e:	482a      	ldr	r0, [pc, #168]	; (80008b8 <USART_2_IRQHandler+0xb0>)
 8000810:	f7ff fe0a 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d026      	beq.n	8000868 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 800081a:	e014      	b.n	8000846 <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <USART_2_IRQHandler+0xb4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f107 020c 	add.w	r2, r7, #12
 8000824:	f107 010b 	add.w	r1, r7, #11
 8000828:	4618      	mov	r0, r3
 800082a:	f006 fb47 	bl	8006ebc <xQueueReceiveFromISR>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d103      	bne.n	800083c <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 8000834:	4820      	ldr	r0, [pc, #128]	; (80008b8 <USART_2_IRQHandler+0xb0>)
 8000836:	f7ff fe2a 	bl	800048e <LL_USART_DisableIT_TXE>
 800083a:	e00a      	b.n	8000852 <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 800083c:	7afb      	ldrb	r3, [r7, #11]
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	; (80008b8 <USART_2_IRQHandler+0xb0>)
 8000842:	f7ff fe42 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <USART_2_IRQHandler+0xb0>)
 8000848:	f7ff fdee 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1e4      	bne.n	800081c <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d007      	beq.n	8000868 <USART_2_IRQHandler+0x60>
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <USART_2_IRQHandler+0xb8>)
 800085a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <USART_2_IRQHandler+0xb0>)
 800086a:	f7ff fdca 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d01d      	beq.n	80008b0 <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000874:	e00b      	b.n	800088e <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <USART_2_IRQHandler+0xb0>)
 8000878:	f7ff fe19 	bl	80004ae <LL_USART_ReceiveData8>
 800087c:	4603      	mov	r3, r0
        	uint8_t byte =
 800087e:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <USART_2_IRQHandler+0xbc>)
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	1d3a      	adds	r2, r7, #4
 8000886:	1cf9      	adds	r1, r7, #3
 8000888:	2300      	movs	r3, #0
 800088a:	f006 f99b 	bl	8006bc4 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <USART_2_IRQHandler+0xb0>)
 8000890:	f7ff fdb7 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1ed      	bne.n	8000876 <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d007      	beq.n	80008b0 <USART_2_IRQHandler+0xa8>
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <USART_2_IRQHandler+0xb8>)
 80008a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	f3bf 8f6f 	isb	sy
    }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40004400 	.word	0x40004400
 80008bc:	20001190 	.word	0x20001190
 80008c0:	e000ed04 	.word	0xe000ed04
 80008c4:	20001198 	.word	0x20001198

080008c8 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008ce:	482a      	ldr	r0, [pc, #168]	; (8000978 <USART_1_IRQHandler+0xb0>)
 80008d0:	f7ff fdaa 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d026      	beq.n	8000928 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 80008da:	e014      	b.n	8000906 <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <USART_1_IRQHandler+0xb4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f107 020c 	add.w	r2, r7, #12
 80008e4:	f107 010b 	add.w	r1, r7, #11
 80008e8:	4618      	mov	r0, r3
 80008ea:	f006 fae7 	bl	8006ebc <xQueueReceiveFromISR>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d103      	bne.n	80008fc <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 80008f4:	4820      	ldr	r0, [pc, #128]	; (8000978 <USART_1_IRQHandler+0xb0>)
 80008f6:	f7ff fdca 	bl	800048e <LL_USART_DisableIT_TXE>
 80008fa:	e00a      	b.n	8000912 <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	4619      	mov	r1, r3
 8000900:	481d      	ldr	r0, [pc, #116]	; (8000978 <USART_1_IRQHandler+0xb0>)
 8000902:	f7ff fde2 	bl	80004ca <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <USART_1_IRQHandler+0xb0>)
 8000908:	f7ff fd8e 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1e4      	bne.n	80008dc <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d007      	beq.n	8000928 <USART_1_IRQHandler+0x60>
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <USART_1_IRQHandler+0xb8>)
 800091a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	f3bf 8f4f 	dsb	sy
 8000924:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <USART_1_IRQHandler+0xb0>)
 800092a:	f7ff fd6a 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01d      	beq.n	8000970 <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000934:	e00b      	b.n	800094e <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 8000936:	4810      	ldr	r0, [pc, #64]	; (8000978 <USART_1_IRQHandler+0xb0>)
 8000938:	f7ff fdb9 	bl	80004ae <LL_USART_ReceiveData8>
 800093c:	4603      	mov	r3, r0
        	uint8_t byte =
 800093e:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <USART_1_IRQHandler+0xbc>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	1d3a      	adds	r2, r7, #4
 8000946:	1cf9      	adds	r1, r7, #3
 8000948:	2300      	movs	r3, #0
 800094a:	f006 f93b 	bl	8006bc4 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800094e:	480a      	ldr	r0, [pc, #40]	; (8000978 <USART_1_IRQHandler+0xb0>)
 8000950:	f7ff fd57 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1ed      	bne.n	8000936 <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d007      	beq.n	8000970 <USART_1_IRQHandler+0xa8>
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <USART_1_IRQHandler+0xb8>)
 8000962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	f3bf 8f4f 	dsb	sy
 800096c:	f3bf 8f6f 	isb	sy
    }
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013800 	.word	0x40013800
 800097c:	200011e8 	.word	0x200011e8
 8000980:	e000ed04 	.word	0xe000ed04
 8000984:	20001070 	.word	0x20001070

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fe6d 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f865 	bl	8000a60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000996:	f000 f8b4 	bl	8000b02 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 fbaf 	bl	80010fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099e:	f000 fafd 	bl	8000f9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009a2:	f000 f8d9 	bl	8000b58 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80009a6:	f000 fa77 	bl	8000e98 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80009aa:	f000 fa25 	bl	8000df8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80009ae:	f000 f9ad 	bl	8000d0c <MX_TIM2_Init>
  MX_ADC2_Init();
 80009b2:	f000 f947 	bl	8000c44 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 80009b6:	2001      	movs	r0, #1
 80009b8:	f005 ffed 	bl	8006996 <xQueueCreateMutex>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <main+0xac>)
 80009c0:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 80009c2:	2001      	movs	r0, #1
 80009c4:	f005 ffe7 	bl	8006996 <xQueueCreateMutex>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <main+0xb0>)
 80009cc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <main+0xb4>)
 80009d0:	1d3c      	adds	r4, r7, #4
 80009d2:	461d      	mov	r5, r3
 80009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f005 fde6 	bl	80065b6 <osThreadCreate>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <main+0xb8>)
 80009ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 80009f0:	2300      	movs	r3, #0
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2300      	movs	r3, #0
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	4911      	ldr	r1, [pc, #68]	; (8000a44 <main+0xbc>)
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <main+0xc0>)
 8000a00:	f006 fc49 	bl	8007296 <xTaskCreate>
 			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
 			  NULL,       /* parametro para a task */
 			  1,          /* nivel de prioridade */
 			  NULL);      /* ponteiro para o handle da task */

  xTaskCreate(pont,    /* Nome da funcao que contem a task */
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <main+0xc4>)
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	490f      	ldr	r1, [pc, #60]	; (8000a50 <main+0xc8>)
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <main+0xcc>)
 8000a14:	f006 fc3f 	bl	8007296 <xTaskCreate>
// 			  1,          /* nivel de prioridade */
// 			  NULL);      /* ponteiro para o handle da task */



  xTaskCreate(pressButton,    /* Nome da funcao que contem a task */
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2300      	movs	r3, #0
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <main+0xd0>)
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <main+0xd4>)
 8000a28:	f006 fc35 	bl	8007296 <xTaskCreate>
			  NULL);      /* ponteiro para o handle da task */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a2c:	f005 fdbc 	bl	80065a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0xa8>
 8000a32:	bf00      	nop
 8000a34:	20000344 	.word	0x20000344
 8000a38:	20000348 	.word	0x20000348
 8000a3c:	08009480 	.word	0x08009480
 8000a40:	2000106c 	.word	0x2000106c
 8000a44:	08009468 	.word	0x08009468
 8000a48:	080007cd 	.word	0x080007cd
 8000a4c:	20001194 	.word	0x20001194
 8000a50:	0800946c 	.word	0x0800946c
 8000a54:	08000675 	.word	0x08000675
 8000a58:	08009474 	.word	0x08009474
 8000a5c:	08000799 	.word	0x08000799

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	; 0x58
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2244      	movs	r2, #68	; 0x44
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f008 f846 	bl	8008b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a86:	f002 fafd 	bl	8003084 <HAL_PWREx_ControlVoltageScaling>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a90:	f000 fbb4 	bl	80011fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fb34 	bl	8003130 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ace:	f000 fb95 	bl	80011fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 ff06 	bl	80038fc <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000af6:	f000 fb81 	bl	80011fc <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3758      	adds	r7, #88	; 0x58
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b0a2      	sub	sp, #136	; 0x88
 8000b06:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2288      	movs	r2, #136	; 0x88
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f007 fff6 	bl	8008b00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b18:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b1e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b20:	2302      	movs	r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b3c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 f8fd 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000b4c:	f000 fb56 	bl	80011fc <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3788      	adds	r7, #136	; 0x88
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <MX_ADC1_Init+0xe4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bda:	4817      	ldr	r0, [pc, #92]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bdc:	f000 ff6a 	bl	8001ab4 <HAL_ADC_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000be6:	f000 fb09 	bl	80011fc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000bf6:	f001 fecb 	bl	8002990 <HAL_ADCEx_MultiModeConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c00:	f000 fafc 	bl	80011fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_ADC1_Init+0xe8>)
 8000c06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c10:	237f      	movs	r3, #127	; 0x7f
 8000c12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c14:	2304      	movs	r3, #4
 8000c16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_ADC1_Init+0xe0>)
 8000c22:	f001 fa3d 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000c2c:	f000 fae6 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000112c 	.word	0x2000112c
 8000c3c:	50040000 	.word	0x50040000
 8000c40:	14f00020 	.word	0x14f00020

08000c44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c5c:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <MX_ADC2_Init+0xc0>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000cbc:	f000 fefa 	bl	8001ab4 <HAL_ADC_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000cc6:	f000 fa99 	bl	80011fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_ADC2_Init+0xc4>)
 8000ccc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd6:	237f      	movs	r3, #127	; 0x7f
 8000cd8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_ADC2_Init+0xbc>)
 8000ce8:	f001 f9da 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000cf2:	f000 fa83 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20001074 	.word	0x20001074
 8000d04:	50040100 	.word	0x50040100
 8000d08:	25b00200 	.word	0x25b00200

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000d46:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d48:	227f      	movs	r2, #127	; 0x7f
 8000d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d52:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d66:	4823      	ldr	r0, [pc, #140]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d68:	f003 fca6 	bl	80046b8 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d72:	f000 fa43 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481c      	ldr	r0, [pc, #112]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d84:	f003 fff0 	bl	8004d68 <HAL_TIM_ConfigClockSource>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d8e:	f000 fa35 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000d94:	f003 fd58 	bl	8004848 <HAL_TIM_PWM_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d9e:	f000 fa2d 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000db2:	f004 fcd1 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dbc:	f000 fa1e 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc0:	2360      	movs	r3, #96	; 0x60
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000dd8:	f003 feb6 	bl	8004b48 <HAL_TIM_PWM_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000de2:	f000 fa0b 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <MX_TIM2_Init+0xe8>)
 8000de8:	f000 faee 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000dec:	bf00      	nop
 8000dee:	3738      	adds	r7, #56	; 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000119c 	.word	0x2000119c

08000df8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <MX_TIM3_Init+0x9c>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e1e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e40:	f003 fc3a 	bl	80046b8 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000e4a:	f000 f9d7 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e5c:	f003 ff84 	bl	8004d68 <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000e66:	f000 f9c9 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_TIM3_Init+0x98>)
 8000e78:	f004 fc6e 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e82:	f000 f9bb 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200010e0 	.word	0x200010e0
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0b0      	sub	sp, #192	; 0xc0
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2288      	movs	r2, #136	; 0x88
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f007 fe18 	bl	8008b00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 ff30 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ee6:	f000 f989 	bl	80011fc <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000eea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eee:	f7ff fb2d 	bl	800054c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fafa 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000ef8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f004 fe07 	bl	8005b3a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000f2c:	f7ff f9ba 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2200      	movs	r2, #0
 8000f34:	2105      	movs	r1, #5
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fa0a 	bl	8000350 <NVIC_EncodePriority>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2025      	movs	r0, #37	; 0x25
 8000f42:	f7ff f9db 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000f46:	2025      	movs	r0, #37	; 0x25
 8000f48:	f7ff f9ba 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000f4c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f66:	230c      	movs	r3, #12
 8000f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 8000f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_USART1_UART_Init+0x100>)
 8000f80:	f005 fa7e 	bl	8006480 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_USART1_UART_Init+0x100>)
 8000f86:	f7ff fa26 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_USART1_UART_Init+0x100>)
 8000f8c:	f7ff fa13 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	37c0      	adds	r7, #192	; 0xc0
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40013800 	.word	0x40013800

08000f9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b0      	sub	sp, #192	; 0xc0
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

	tx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f005 fc82 	bl	80068b0 <xQueueGenericCreate>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <MX_USART2_UART_Init+0x14c>)
 8000fb0:	6013      	str	r3, [r2, #0]
	rx_queue_1 = xQueueCreate(10, sizeof(uint8_t));
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f005 fc7a 	bl	80068b0 <xQueueGenericCreate>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <MX_USART2_UART_Init+0x150>)
 8000fc0:	6013      	str	r3, [r2, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000fc2:	484b      	ldr	r0, [pc, #300]	; (80010f0 <MX_USART2_UART_Init+0x154>)
 8000fc4:	f7ff fa43 	bl	800044e <LL_USART_EnableIT_RXNE>


  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2288      	movs	r2, #136	; 0x88
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fd83 	bl	8008b00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fe9b 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 8001010:	f000 f8f4 	bl	80011fc <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001014:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001018:	f7ff fa80 	bl	800051c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fa65 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001022:	230c      	movs	r3, #12
 8001024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001040:	2307      	movs	r3, #7
 8001042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f004 fd73 	bl	8005b3a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001054:	f7ff f926 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8001058:	4603      	mov	r3, r0
 800105a:	2200      	movs	r2, #0
 800105c:	2105      	movs	r1, #5
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f976 	bl	8000350 <NVIC_EncodePriority>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	2026      	movs	r0, #38	; 0x26
 800106a:	f7ff f947 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800106e:	2026      	movs	r0, #38	; 0x26
 8001070:	f7ff f926 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001074:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800108e:	230c      	movs	r3, #12
 8001090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 80010a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <MX_USART2_UART_Init+0x154>)
 80010a8:	f005 f9ea 	bl	8006480 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <MX_USART2_UART_Init+0x154>)
 80010ae:	f7ff f992 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80010b2:	480f      	ldr	r0, [pc, #60]	; (80010f0 <MX_USART2_UART_Init+0x154>)
 80010b4:	f7ff f97f 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f005 fbf7 	bl	80068b0 <xQueueGenericCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <MX_USART2_UART_Init+0x158>)
 80010c6:	6013      	str	r3, [r2, #0]
  rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	2005      	movs	r0, #5
 80010ce:	f005 fbef 	bl	80068b0 <xQueueGenericCreate>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x15c>)
 80010d6:	6013      	str	r3, [r2, #0]

  LL_USART_EnableIT_RXNE(USART2);
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART2_UART_Init+0x154>)
 80010da:	f7ff f9b8 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	37c0      	adds	r7, #192	; 0xc0
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200011e8 	.word	0x200011e8
 80010ec:	20001070 	.word	0x20001070
 80010f0:	40004400 	.word	0x40004400
 80010f4:	20001190 	.word	0x20001190
 80010f8:	20001198 	.word	0x20001198

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a29      	ldr	r2, [pc, #164]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_GPIO_Init+0xc0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a23      	ldr	r2, [pc, #140]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_GPIO_Init+0xc0>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_GPIO_Init+0xc0>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2101      	movs	r1, #1
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <MX_GPIO_Init+0xc4>)
 8001178:	f001 ff5e 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1;
 800117c:	f242 0302 	movw	r3, #8194	; 0x2002
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_GPIO_Init+0xc8>)
 8001192:	f001 fd8f 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_GPIO_Init+0xc4>)
 80011ae:	f001 fd81 	bl	8002cb4 <HAL_GPIO_Init>

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800

080011c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f005 fa3c 	bl	800664e <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StartDefaultTask+0x8>

080011d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ea:	f000 fa5f 	bl	80016ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40012c00 	.word	0x40012c00

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_MspInit+0x4c>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_MspInit+0x4c>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6613      	str	r3, [r2, #96]	; 0x60
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_MspInit+0x4c>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_MspInit+0x4c>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_MspInit+0x4c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6593      	str	r3, [r2, #88]	; 0x58
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_MspInit+0x4c>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	210f      	movs	r1, #15
 8001242:	f06f 0001 	mvn.w	r0, #1
 8001246:	f001 fd0b 	bl	8002c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_ADC_MspInit+0xf0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12e      	bne.n	80012d8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800127a:	4b34      	ldr	r3, [pc, #208]	; (800134c <HAL_ADC_MspInit+0xf4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a32      	ldr	r2, [pc, #200]	; (800134c <HAL_ADC_MspInit+0xf4>)
 8001282:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <HAL_ADC_MspInit+0xf4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10b      	bne.n	80012a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 8001292:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012bc:	2301      	movs	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012c0:	230b      	movs	r3, #11
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f001 fcef 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012d6:	e032      	b.n	800133e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12d      	bne.n	800133e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_ADC_MspInit+0xf4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a18      	ldr	r2, [pc, #96]	; (800134c <HAL_ADC_MspInit+0xf4>)
 80012ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_ADC_MspInit+0xf4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10b      	bne.n	800130c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	4a15      	ldr	r2, [pc, #84]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 80012fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001324:	2310      	movs	r3, #16
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001328:	230b      	movs	r3, #11
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f001 fcbb 	bl	8002cb4 <HAL_GPIO_Init>
}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	; 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	50040000 	.word	0x50040000
 800134c:	20000350 	.word	0x20000350
 8001350:	40021000 	.word	0x40021000
 8001354:	50040100 	.word	0x50040100

08001358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001368:	d10c      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_TIM_Base_MspInit+0x68>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_TIM_Base_MspInit+0x68>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_TIM_Base_MspInit+0x68>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001382:	e018      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_TIM_Base_MspInit+0x6c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d113      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_TIM_Base_MspInit+0x68>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_TIM_Base_MspInit+0x68>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_TIM_Base_MspInit+0x68>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2105      	movs	r1, #5
 80013aa:	201d      	movs	r0, #29
 80013ac:	f001 fc58 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b0:	201d      	movs	r0, #29
 80013b2:	f001 fc71 	bl	8002c98 <HAL_NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40000400 	.word	0x40000400

080013c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d11c      	bne.n	8001424 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_TIM_MspPostInit+0x64>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_TIM_MspPostInit+0x64>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_TIM_MspPostInit+0x64>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001402:	2302      	movs	r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001412:	2301      	movs	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f001 fc48 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	2019      	movs	r0, #25
 8001446:	f001 fc0b 	bl	8002c60 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800144a:	2019      	movs	r0, #25
 800144c:	f001 fc24 	bl	8002c98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_InitTick+0x9c>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_InitTick+0x9c>)
 8001456:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145a:	6613      	str	r3, [r2, #96]	; 0x60
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_InitTick+0x9c>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001468:	f107 0210 	add.w	r2, r7, #16
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fbd2 	bl	8003c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001478:	f002 fbba 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 800147c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <HAL_InitTick+0xa0>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9b      	lsrs	r3, r3, #18
 8001488:	3b01      	subs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_InitTick+0xa4>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <HAL_InitTick+0xa8>)
 8001490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_InitTick+0xa4>)
 8001494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001498:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_InitTick+0xa4>)
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_InitTick+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_InitTick+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <HAL_InitTick+0xa4>)
 80014ae:	f003 f903 	bl	80046b8 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d104      	bne.n	80014c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <HAL_InitTick+0xa4>)
 80014ba:	f003 f955 	bl	8004768 <HAL_TIM_Base_Start_IT>
 80014be:	4603      	mov	r3, r0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3730      	adds	r7, #48	; 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	431bde83 	.word	0x431bde83
 80014d4:	200011ec 	.word	0x200011ec
 80014d8:	40012c00 	.word	0x40012c00

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800150e:	f003 f9fc 	bl	800490a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200011ec 	.word	0x200011ec

0800151c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM3_IRQHandler+0x10>)
 8001522:	f003 f9f2 	bl	800490a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200010e0 	.word	0x200010e0

08001530 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8001534:	f7ff f9c8 	bl	80008c8 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 8001540:	f7ff f962 	bl	8000808 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f007 fa88 	bl	8008a8c <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20018000 	.word	0x20018000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	20000354 	.word	0x20000354
 80015b0:	20001250 	.word	0x20001250

080015b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <SystemInit+0x5c>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <SystemInit+0x5c>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <SystemInit+0x60>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <SystemInit+0x60>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <SystemInit+0x60>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <SystemInit+0x60>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <SystemInit+0x60>)
 80015e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <SystemInit+0x60>)
 80015ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <SystemInit+0x60>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <SystemInit+0x60>)
 80015f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SystemInit+0x60>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	40021000 	.word	0x40021000

08001618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800161c:	f7ff ffca 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001620:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001622:	e003      	b.n	800162c <LoopCopyDataInit>

08001624 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001626:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001628:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800162a:	3104      	adds	r1, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <LoopForever+0xa>)
	ldr	r3, =_edata
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001630:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001632:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001634:	d3f6      	bcc.n	8001624 <CopyDataInit>
	ldr	r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001638:	e002      	b.n	8001640 <LoopFillZerobss>

0800163a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800163a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800163c:	f842 3b04 	str.w	r3, [r2], #4

08001640 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <LoopForever+0x16>)
	cmp	r2, r3
 8001642:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001644:	d3f9      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001646:	f007 fa27 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800164a:	f7ff f99d 	bl	8000988 <main>

0800164e <LoopForever>:

LoopForever:
    b LoopForever
 800164e:	e7fe      	b.n	800164e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001654:	08009588 	.word	0x08009588
	ldr	r0, =_sdata
 8001658:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800165c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001660:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001664:	2000124c 	.word	0x2000124c

08001668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_2_IRQHandler>
	...

0800166c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_Init+0x3c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_Init+0x3c>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f001 fae1 	bl	8002c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001688:	200f      	movs	r0, #15
 800168a:	f7ff fed1 	bl	8001430 <HAL_InitTick>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	e001      	b.n	800169e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800169a:	f7ff fdb5 	bl	8001208 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800169e:	79fb      	ldrb	r3, [r7, #7]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20001238 	.word	0x20001238

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20001238 	.word	0x20001238

080016ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3360      	adds	r3, #96	; 0x60
 8001766:	461a      	mov	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <LL_ADC_SetOffset+0x44>)
 8001776:	4013      	ands	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	4313      	orrs	r3, r2
 8001784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800178c:	bf00      	nop
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	03fff000 	.word	0x03fff000

0800179c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3360      	adds	r3, #96	; 0x60
 80017aa:	461a      	mov	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3360      	adds	r3, #96	; 0x60
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3330      	adds	r3, #48	; 0x30
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	4413      	add	r3, r2
 8001842:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	211f      	movs	r1, #31
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0e9b      	lsrs	r3, r3, #26
 800185c:	f003 011f 	and.w	r1, r3, #31
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3314      	adds	r3, #20
 800188c:	461a      	mov	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	0e5b      	lsrs	r3, r3, #25
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0d1b      	lsrs	r3, r3, #20
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2107      	movs	r1, #7
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0d1b      	lsrs	r3, r3, #20
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0318 	and.w	r3, r3, #24
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018f8:	40d9      	lsrs	r1, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	400b      	ands	r3, r1
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	431a      	orrs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	0007ffff 	.word	0x0007ffff

0800191c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 031f 	and.w	r3, r3, #31
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_IsEnabled+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_IsEnabled+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a52:	f043 0204 	orr.w	r2, r3, #4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d101      	bne.n	8001aa4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e136      	b.n	8001d3c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fbbb 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff3f 	bl	8001978 <LL_ADC_IsDeepPowerDownEnabled>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff25 	bl	8001954 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff5a 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff3e 	bl	80019a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b24:	4b87      	ldr	r3, [pc, #540]	; (8001d44 <HAL_ADC_Init+0x290>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	4a87      	ldr	r2, [pc, #540]	; (8001d48 <HAL_ADC_Init+0x294>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	3301      	adds	r3, #1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f9      	bne.n	8001b3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff3c 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f043 0210 	orr.w	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff75 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001b7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80cf 	bne.w	8001d2a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 80cb 	bne.w	8001d2a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b9c:	f043 0202 	orr.w	r2, r3, #2
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff35 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d115      	bne.n	8001be0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb4:	4865      	ldr	r0, [pc, #404]	; (8001d4c <HAL_ADC_Init+0x298>)
 8001bb6:	f7ff ff2f 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	4864      	ldr	r0, [pc, #400]	; (8001d50 <HAL_ADC_Init+0x29c>)
 8001bbe:	f7ff ff2b 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	431c      	orrs	r4, r3
 8001bc6:	4863      	ldr	r0, [pc, #396]	; (8001d54 <HAL_ADC_Init+0x2a0>)
 8001bc8:	f7ff ff26 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4323      	orrs	r3, r4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	485f      	ldr	r0, [pc, #380]	; (8001d58 <HAL_ADC_Init+0x2a4>)
 8001bdc:	f7ff fd86 	bl	80016ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e5b      	ldrb	r3, [r3, #25]
 8001be4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bf0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bf6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d106      	bne.n	8001c1c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	3b01      	subs	r3, #1
 8001c14:	045b      	lsls	r3, r3, #17
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d009      	beq.n	8001c38 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_ADC_Init+0x2a8>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff08 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001c56:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff15 	bl	8001a8c <LL_ADC_INJ_IsConversionOngoing>
 8001c62:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d13d      	bne.n	8001ce6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d13a      	bne.n	8001ce6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c74:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c7c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c8c:	f023 0302 	bic.w	r3, r3, #2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	69b9      	ldr	r1, [r7, #24]
 8001c96:	430b      	orrs	r3, r1
 8001c98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d118      	bne.n	8001cd6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	e007      	b.n	8001ce6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10c      	bne.n	8001d08 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f023 010f 	bic.w	r1, r3, #15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
 8001d06:	e007      	b.n	8001d18 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020f 	bic.w	r2, r2, #15
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f023 0303 	bic.w	r3, r3, #3
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
 8001d28:	e007      	b.n	8001d3a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f043 0210 	orr.w	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	053e2d63 	.word	0x053e2d63
 8001d4c:	50040000 	.word	0x50040000
 8001d50:	50040100 	.word	0x50040100
 8001d54:	50040200 	.word	0x50040200
 8001d58:	50040300 	.word	0x50040300
 8001d5c:	fff0c007 	.word	0xfff0c007

08001d60 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d68:	4857      	ldr	r0, [pc, #348]	; (8001ec8 <HAL_ADC_Start+0x168>)
 8001d6a:	f7ff fdd7 	bl	800191c <LL_ADC_GetMultimode>
 8001d6e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fe76 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 809c 	bne.w	8001eba <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_Start+0x30>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e097      	b.n	8001ec0 <HAL_ADC_Start+0x160>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fd71 	bl	8002880 <ADC_Enable>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 8083 	bne.w	8001eb0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a42      	ldr	r2, [pc, #264]	; (8001ecc <HAL_ADC_Start+0x16c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d002      	beq.n	8001dce <HAL_ADC_Start+0x6e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADC_Start+0x70>
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_ADC_Start+0x170>)
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d002      	beq.n	8001dde <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df6:	d106      	bne.n	8001e06 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f023 0206 	bic.w	r2, r3, #6
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
 8001e04:	e002      	b.n	8001e0c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	221c      	movs	r2, #28
 8001e12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_ADC_Start+0x16c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d002      	beq.n	8001e2c <HAL_ADC_Start+0xcc>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_Start+0xce>
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_ADC_Start+0x170>)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d008      	beq.n	8001e48 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d002      	beq.n	8001e48 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d114      	bne.n	8001e72 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fde7 	bl	8001a3e <LL_ADC_REG_StartConversion>
 8001e70:	e025      	b.n	8001ebe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_ADC_Start+0x16c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d002      	beq.n	8001e8e <HAL_ADC_Start+0x12e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e000      	b.n	8001e90 <HAL_ADC_Start+0x130>
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_ADC_Start+0x170>)
 8001e90:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00f      	beq.n	8001ebe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ea6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
 8001eae:	e006      	b.n	8001ebe <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001eb8:	e001      	b.n	8001ebe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	50040300 	.word	0x50040300
 8001ecc:	50040100 	.word	0x50040100
 8001ed0:	50040000 	.word	0x50040000

08001ed4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ede:	4866      	ldr	r0, [pc, #408]	; (8002078 <HAL_ADC_PollForConversion+0x1a4>)
 8001ee0:	f7ff fd1c 	bl	800191c <LL_ADC_GetMultimode>
 8001ee4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d102      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e02a      	b.n	8001f4a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d002      	beq.n	8001f06 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	d111      	bne.n	8001f2a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0a4      	b.n	800206e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f24:	2304      	movs	r3, #4
 8001f26:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f28:	e00f      	b.n	8001f4a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f2a:	4853      	ldr	r0, [pc, #332]	; (8002078 <HAL_ADC_PollForConversion+0x1a4>)
 8001f2c:	f7ff fd04 	bl	8001938 <LL_ADC_GetMultiDMATransfer>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e093      	b.n	800206e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f46:	2304      	movs	r3, #4
 8001f48:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f4a:	f7ff fbc3 	bl	80016d4 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f50:	e021      	b.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d01d      	beq.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f5a:	f7ff fbbb 	bl	80016d4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <HAL_ADC_PollForConversion+0x9c>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d112      	bne.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10b      	bne.n	8001f96 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f043 0204 	orr.w	r2, r3, #4
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e06b      	b.n	800206e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0d6      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fc22 	bl	80017fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01c      	beq.n	8001ffa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e5b      	ldrb	r3, [r3, #25]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d118      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d111      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_ADC_PollForConversion+0x1a8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d002      	beq.n	800200a <HAL_ADC_PollForConversion+0x136>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e000      	b.n	800200c <HAL_ADC_PollForConversion+0x138>
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_ADC_PollForConversion+0x1ac>)
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	4293      	cmp	r3, r2
 8002012:	d008      	beq.n	8002026 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d002      	beq.n	8002026 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b09      	cmp	r3, #9
 8002024:	d104      	bne.n	8002030 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	e00c      	b.n	800204a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_ADC_PollForConversion+0x1a8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d002      	beq.n	8002040 <HAL_ADC_PollForConversion+0x16c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e000      	b.n	8002042 <HAL_ADC_PollForConversion+0x16e>
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_ADC_PollForConversion+0x1ac>)
 8002042:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d104      	bne.n	800205a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2208      	movs	r2, #8
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e008      	b.n	800206c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d103      	bne.n	800206c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	220c      	movs	r2, #12
 800206a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	50040300 	.word	0x50040300
 800207c:	50040100 	.word	0x50040100
 8002080:	50040000 	.word	0x50040000

08002084 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0b6      	sub	sp, #216	; 0xd8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x22>
 80020be:	2302      	movs	r3, #2
 80020c0:	e3c7      	b.n	8002852 <HAL_ADC_ConfigChannel+0x7b2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fcc9 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 83a8 	bne.w	800282c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d824      	bhi.n	800212e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	3b02      	subs	r3, #2
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d81b      	bhi.n	8002126 <HAL_ADC_ConfigChannel+0x86>
 80020ee:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_ADC_ConfigChannel+0x54>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002105 	.word	0x08002105
 80020f8:	0800210d 	.word	0x0800210d
 80020fc:	08002115 	.word	0x08002115
 8002100:	0800211d 	.word	0x0800211d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	220c      	movs	r2, #12
 8002108:	605a      	str	r2, [r3, #4]
          break;
 800210a:	e011      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2212      	movs	r2, #18
 8002110:	605a      	str	r2, [r3, #4]
          break;
 8002112:	e00d      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2218      	movs	r2, #24
 8002118:	605a      	str	r2, [r3, #4]
          break;
 800211a:	e009      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002122:	605a      	str	r2, [r3, #4]
          break;
 8002124:	e004      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2206      	movs	r2, #6
 800212a:	605a      	str	r2, [r3, #4]
          break;
 800212c:	e000      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800212e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	f7ff fb71 	bl	8001824 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fc8d 	bl	8001a66 <LL_ADC_REG_IsConversionOngoing>
 800214c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fc99 	bl	8001a8c <LL_ADC_INJ_IsConversionOngoing>
 800215a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 81a6 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 81a1 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff fb7c 	bl	800187c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00a      	beq.n	80021bc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021b6:	f7ff facd 	bl	8001754 <LL_ADC_SetOffset>
 80021ba:	e17b      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff faea 	bl	800179c <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x148>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fadf 	bl	800179c <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	e01e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x186>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fad4 	bl	800179c <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800220a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800220e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002216:	2320      	movs	r3, #32
 8002218:	e004      	b.n	8002224 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800221a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_ConfigChannel+0x19e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	e018      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1d0>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800225a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff faa3 	bl	80017c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fa87 	bl	800179c <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x20e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fa7c 	bl	800179c <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	e01e      	b.n	80022ec <HAL_ADC_ConfigChannel+0x24c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fa71 	bl	800179c <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e004      	b.n	80022ea <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x264>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	e018      	b.n	8002336 <HAL_ADC_ConfigChannel+0x296>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800231c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e004      	b.n	8002336 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800232c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002336:	429a      	cmp	r2, r3
 8002338:	d106      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fa40 	bl	80017c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2102      	movs	r1, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fa24 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x2d4>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fa19 	bl	800179c <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	e01e      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x312>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fa0e 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800239a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e004      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x32a>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	e016      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x358>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e004      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f9df 	bl	80017c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2103      	movs	r1, #3
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f9c3 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x396>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2103      	movs	r1, #3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f9b8 	bl	800179c <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	0e9b      	lsrs	r3, r3, #26
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	e017      	b.n	8002466 <HAL_ADC_ConfigChannel+0x3c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2103      	movs	r1, #3
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f9ad 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800244e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002450:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e003      	b.n	8002464 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800245c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3de>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	e011      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x402>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800248c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800249a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d106      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	2103      	movs	r1, #3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f98a 	bl	80017c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff faad 	bl	8001a18 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 813f 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7ff f9fe 	bl	80018d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a8e      	ldr	r2, [pc, #568]	; (8002718 <HAL_ADC_ConfigChannel+0x678>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	f040 8130 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_ADC_ConfigChannel+0x46c>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	3301      	adds	r3, #1
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b09      	cmp	r3, #9
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e019      	b.n	8002540 <HAL_ADC_ConfigChannel+0x4a0>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800251a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800251e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2b09      	cmp	r3, #9
 8002538:	bf94      	ite	ls
 800253a:	2301      	movls	r3, #1
 800253c:	2300      	movhi	r3, #0
 800253e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002540:	2b00      	cmp	r3, #0
 8002542:	d079      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x4c0>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255e:	e015      	b.n	800258c <HAL_ADC_ConfigChannel+0x4ec>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800256e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002570:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e003      	b.n	8002584 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	069b      	lsls	r3, r3, #26
 8002588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x50c>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	e017      	b.n	80025dc <HAL_ADC_ConfigChannel+0x53c>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e003      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	ea42 0103 	orr.w	r1, r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x562>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	3301      	adds	r3, #1
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	e018      	b.n	8002634 <HAL_ADC_ConfigChannel+0x594>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e003      	b.n	8002626 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	430b      	orrs	r3, r1
 8002636:	e080      	b.n	800273a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x5b4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	069b      	lsls	r3, r3, #26
 800264e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002652:	e015      	b.n	8002680 <HAL_ADC_ConfigChannel+0x5e0>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	3301      	adds	r3, #1
 800267a:	069b      	lsls	r3, r3, #26
 800267c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x600>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	3301      	adds	r3, #1
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	e017      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x630>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	61fb      	str	r3, [r7, #28]
  return result;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	ea42 0103 	orr.w	r1, r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x65c>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	3301      	adds	r3, #1
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026fa:	e01d      	b.n	8002738 <HAL_ADC_ConfigChannel+0x698>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	613b      	str	r3, [r7, #16]
  return result;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e005      	b.n	8002724 <HAL_ADC_ConfigChannel+0x684>
 8002718:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	051b      	lsls	r3, r3, #20
 8002734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002738:	430b      	orrs	r3, r1
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6892      	ldr	r2, [r2, #8]
 800273e:	4619      	mov	r1, r3
 8002740:	f7ff f89c 	bl	800187c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_ADC_ConfigChannel+0x7bc>)
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d07a      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002750:	4843      	ldr	r0, [pc, #268]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002752:	f7fe fff1 	bl	8001738 <LL_ADC_GetCommonPathInternalCh>
 8002756:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a41      	ldr	r2, [pc, #260]	; (8002864 <HAL_ADC_ConfigChannel+0x7c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d12c      	bne.n	80027be <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d126      	bne.n	80027be <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_ADC_ConfigChannel+0x6e4>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a3b      	ldr	r2, [pc, #236]	; (800286c <HAL_ADC_ConfigChannel+0x7cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d15d      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800278c:	4619      	mov	r1, r3
 800278e:	4834      	ldr	r0, [pc, #208]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002790:	f7fe ffbf 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_ADC_ConfigChannel+0x7d0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	4a36      	ldr	r2, [pc, #216]	; (8002874 <HAL_ADC_ConfigChannel+0x7d4>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ae:	e002      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f9      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027bc:	e040      	b.n	8002840 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_ADC_ConfigChannel+0x7d8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d118      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x75a>
 80027c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d112      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x748>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_ADC_ConfigChannel+0x7cc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d12d      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f0:	4619      	mov	r1, r3
 80027f2:	481b      	ldr	r0, [pc, #108]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 80027f4:	f7fe ff8d 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f8:	e024      	b.n	8002844 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_ADC_ConfigChannel+0x7dc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d120      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11a      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d115      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800281a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002822:	4619      	mov	r1, r3
 8002824:	480e      	ldr	r0, [pc, #56]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002826:	f7fe ff74 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
 800282a:	e00c      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800283e:	e002      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002840:	bf00      	nop
 8002842:	e000      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002844:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800284e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002852:	4618      	mov	r0, r3
 8002854:	37d8      	adds	r7, #216	; 0xd8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	80080000 	.word	0x80080000
 8002860:	50040300 	.word	0x50040300
 8002864:	c7520000 	.word	0xc7520000
 8002868:	50040000 	.word	0x50040000
 800286c:	50040200 	.word	0x50040200
 8002870:	20000000 	.word	0x20000000
 8002874:	053e2d63 	.word	0x053e2d63
 8002878:	cb840000 	.word	0xcb840000
 800287c:	80000001 	.word	0x80000001

08002880 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff f8c3 	bl	8001a18 <LL_ADC_IsEnabled>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d14d      	bne.n	8002934 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <ADC_Enable+0xc0>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00d      	beq.n	80028c2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e039      	b.n	8002936 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f892 	bl	80019f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028cc:	f7fe ff02 	bl	80016d4 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d2:	e028      	b.n	8002926 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f89d 	bl	8001a18 <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff f881 	bl	80019f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ee:	f7fe fef1 	bl	80016d4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d914      	bls.n	8002926 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d00d      	beq.n	8002926 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	f043 0210 	orr.w	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e007      	b.n	8002936 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d1cf      	bne.n	80028d4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	8000003f 	.word	0x8000003f

08002944 <LL_ADC_IsEnabled>:
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <LL_ADC_IsEnabled+0x18>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <LL_ADC_IsEnabled+0x1a>
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_REG_IsConversionOngoing>:
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d101      	bne.n	8002982 <LL_ADC_REG_IsConversionOngoing+0x18>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b09f      	sub	sp, #124	; 0x7c
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e093      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80029b6:	2300      	movs	r3, #0
 80029b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80029ba:	2300      	movs	r3, #0
 80029bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a47      	ldr	r2, [pc, #284]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d102      	bne.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	e001      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e072      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ffb9 	bl	800296a <LL_ADC_REG_IsConversionOngoing>
 80029f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ffb3 	bl	800296a <LL_ADC_REG_IsConversionOngoing>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d154      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d151      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002a12:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02c      	beq.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a2e:	035b      	lsls	r3, r3, #13
 8002a30:	430b      	orrs	r3, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a38:	4829      	ldr	r0, [pc, #164]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a3a:	f7ff ff83 	bl	8002944 <LL_ADC_IsEnabled>
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4828      	ldr	r0, [pc, #160]	; (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a42:	f7ff ff7f 	bl	8002944 <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	431c      	orrs	r4, r3
 8002a4a:	4828      	ldr	r0, [pc, #160]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a4c:	f7ff ff7a 	bl	8002944 <LL_ADC_IsEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4323      	orrs	r3, r4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d137      	bne.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a60:	f023 030f 	bic.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	6811      	ldr	r1, [r2, #0]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a74:	e028      	b.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a82:	4817      	ldr	r0, [pc, #92]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a84:	f7ff ff5e 	bl	8002944 <LL_ADC_IsEnabled>
 8002a88:	4604      	mov	r4, r0
 8002a8a:	4816      	ldr	r0, [pc, #88]	; (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a8c:	f7ff ff5a 	bl	8002944 <LL_ADC_IsEnabled>
 8002a90:	4603      	mov	r3, r0
 8002a92:	431c      	orrs	r4, r3
 8002a94:	4815      	ldr	r0, [pc, #84]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a96:	f7ff ff55 	bl	8002944 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4323      	orrs	r3, r4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d112      	bne.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aaa:	f023 030f 	bic.w	r3, r3, #15
 8002aae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ab0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab2:	e009      	b.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ac6:	e000      	b.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ad2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	377c      	adds	r7, #124	; 0x7c
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	50040000 	.word	0x50040000
 8002ae4:	50040100 	.word	0x50040100
 8002ae8:	50040300 	.word	0x50040300
 8002aec:	50040200 	.word	0x50040200

08002af0 <__NVIC_SetPriorityGrouping>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff4c 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c72:	f7ff ff61 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002c76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	6978      	ldr	r0, [r7, #20]
 8002c7e:	f7ff ffb1 	bl	8002be4 <NVIC_EncodePriority>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff80 	bl	8002b90 <__NVIC_SetPriority>
}
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff54 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc2:	e17f      	b.n	8002fc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8171 	beq.w	8002fbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d00b      	beq.n	8002cfc <HAL_GPIO_Init+0x48>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d007      	beq.n	8002cfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf0:	2b11      	cmp	r3, #17
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b12      	cmp	r3, #18
 8002cfa:	d130      	bne.n	8002d5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d32:	2201      	movs	r2, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0201 	and.w	r2, r3, #1
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d118      	bne.n	8002d9c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d70:	2201      	movs	r2, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	f003 0201 	and.w	r2, r3, #1
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x128>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b12      	cmp	r3, #18
 8002dda:	d123      	bne.n	8002e24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	08da      	lsrs	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3208      	adds	r2, #8
 8002e1e:	6939      	ldr	r1, [r7, #16]
 8002e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0203 	and.w	r2, r3, #3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80ac 	beq.w	8002fbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_GPIO_Init+0x330>)
 8002e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6a:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_GPIO_Init+0x330>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6613      	str	r3, [r2, #96]	; 0x60
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_GPIO_Init+0x330>)
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e7e:	4a5a      	ldr	r2, [pc, #360]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3302      	adds	r3, #2
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	220f      	movs	r2, #15
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ea8:	d025      	beq.n	8002ef6 <HAL_GPIO_Init+0x242>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4f      	ldr	r2, [pc, #316]	; (8002fec <HAL_GPIO_Init+0x338>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01f      	beq.n	8002ef2 <HAL_GPIO_Init+0x23e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4e      	ldr	r2, [pc, #312]	; (8002ff0 <HAL_GPIO_Init+0x33c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d019      	beq.n	8002eee <HAL_GPIO_Init+0x23a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4d      	ldr	r2, [pc, #308]	; (8002ff4 <HAL_GPIO_Init+0x340>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_Init+0x236>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4c      	ldr	r2, [pc, #304]	; (8002ff8 <HAL_GPIO_Init+0x344>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_Init+0x232>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_GPIO_Init+0x348>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x22e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4a      	ldr	r2, [pc, #296]	; (8003000 <HAL_GPIO_Init+0x34c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_Init+0x22a>
 8002eda:	2306      	movs	r3, #6
 8002edc:	e00c      	b.n	8002ef8 <HAL_GPIO_Init+0x244>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e00a      	b.n	8002ef8 <HAL_GPIO_Init+0x244>
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	e008      	b.n	8002ef8 <HAL_GPIO_Init+0x244>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x244>
 8002eea:	2303      	movs	r3, #3
 8002eec:	e004      	b.n	8002ef8 <HAL_GPIO_Init+0x244>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_Init+0x244>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_GPIO_Init+0x244>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	f002 0203 	and.w	r2, r2, #3
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4093      	lsls	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f08:	4937      	ldr	r1, [pc, #220]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f3a:	4a32      	ldr	r2, [pc, #200]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f40:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_GPIO_Init+0x350>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f47f ae78 	bne.w	8002cc4 <HAL_GPIO_Init+0x10>
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	48000800 	.word	0x48000800
 8002ff4:	48000c00 	.word	0x48000c00
 8002ff8:	48001000 	.word	0x48001000
 8002ffc:	48001400 	.word	0x48001400
 8003000:	48001800 	.word	0x48001800
 8003004:	40010400 	.word	0x40010400

08003008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e001      	b.n	800302a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003054:	e002      	b.n	800305c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_PWREx_GetVoltageRange+0x18>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40007000 	.word	0x40007000

08003084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003092:	d130      	bne.n	80030f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003094:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d038      	beq.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030aa:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030b2:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2232      	movs	r2, #50	; 0x32
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	4a1b      	ldr	r2, [pc, #108]	; (800312c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	3301      	adds	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c8:	e002      	b.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d102      	bne.n	80030e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f2      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f0:	d110      	bne.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e00f      	b.n	8003116 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003102:	d007      	beq.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800310c:	4a05      	ldr	r2, [pc, #20]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003112:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40007000 	.word	0x40007000
 8003128:	20000000 	.word	0x20000000
 800312c:	431bde83 	.word	0x431bde83

08003130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e3d4      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003142:	4ba1      	ldr	r3, [pc, #644]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800314c:	4b9e      	ldr	r3, [pc, #632]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80e4 	beq.w	800332c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <HAL_RCC_OscConfig+0x4a>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	f040 808b 	bne.w	8003288 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b01      	cmp	r3, #1
 8003176:	f040 8087 	bne.w	8003288 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800317a:	4b93      	ldr	r3, [pc, #588]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e3ac      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	4b8c      	ldr	r3, [pc, #560]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <HAL_RCC_OscConfig+0x7c>
 80031a2:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031aa:	e005      	b.n	80031b8 <HAL_RCC_OscConfig+0x88>
 80031ac:	4b86      	ldr	r3, [pc, #536]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d223      	bcs.n	8003204 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fd5d 	bl	8003c80 <RCC_SetFlashLatencyFromMSIRange>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e38d      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d0:	4b7d      	ldr	r3, [pc, #500]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7c      	ldr	r2, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031d6:	f043 0308 	orr.w	r3, r3, #8
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4977      	ldr	r1, [pc, #476]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	4972      	ldr	r1, [pc, #456]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
 8003202:	e025      	b.n	8003250 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6f      	ldr	r2, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b6d      	ldr	r3, [pc, #436]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	496a      	ldr	r1, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003222:	4b69      	ldr	r3, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	4965      	ldr	r1, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fd1d 	bl	8003c80 <RCC_SetFlashLatencyFromMSIRange>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e34d      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003250:	f000 fc36 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	495a      	ldr	r1, [pc, #360]	; (80033cc <HAL_RCC_OscConfig+0x29c>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_OscConfig+0x2a0>)
 800326e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003270:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_RCC_OscConfig+0x2a4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe f8db 	bl	8001430 <HAL_InitTick>
 800327a:	4603      	mov	r3, r0
 800327c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d052      	beq.n	800332a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	e331      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d032      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003290:	4b4d      	ldr	r3, [pc, #308]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a4c      	ldr	r2, [pc, #304]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800329c:	f7fe fa1a 	bl	80016d4 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a4:	f7fe fa16 	bl	80016d4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e31a      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b6:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a40      	ldr	r2, [pc, #256]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	493b      	ldr	r1, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4936      	ldr	r1, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e01a      	b.n	800332c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003302:	f7fe f9e7 	bl	80016d4 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800330a:	f7fe f9e3 	bl	80016d4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e2e7      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x1da>
 8003328:	e000      	b.n	800332c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800332a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d074      	beq.n	8003422 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b08      	cmp	r3, #8
 800333c:	d005      	beq.n	800334a <HAL_RCC_OscConfig+0x21a>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d10e      	bne.n	8003362 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d10b      	bne.n	8003362 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d064      	beq.n	8003420 <HAL_RCC_OscConfig+0x2f0>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d160      	bne.n	8003420 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e2c4      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x24a>
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e01d      	b.n	80033b6 <HAL_RCC_OscConfig+0x286>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003382:	d10c      	bne.n	800339e <HAL_RCC_OscConfig+0x26e>
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 800338a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e00b      	b.n	80033b6 <HAL_RCC_OscConfig+0x286>
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x298>)
 80033b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe f989 	bl	80016d4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c4:	e011      	b.n	80033ea <HAL_RCC_OscConfig+0x2ba>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	080094a4 	.word	0x080094a4
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe f97c 	bl	80016d4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e280      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ea:	4baf      	ldr	r3, [pc, #700]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2a8>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f96c 	bl	80016d4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe f968 	bl	80016d4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e26c      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003412:	4ba5      	ldr	r3, [pc, #660]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x2d0>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d060      	beq.n	80034f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d005      	beq.n	8003440 <HAL_RCC_OscConfig+0x310>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d119      	bne.n	800346e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d116      	bne.n	800346e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003440:	4b99      	ldr	r3, [pc, #612]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_OscConfig+0x328>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e249      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b93      	ldr	r3, [pc, #588]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	061b      	lsls	r3, r3, #24
 8003466:	4990      	ldr	r1, [pc, #576]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800346c:	e040      	b.n	80034f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d023      	beq.n	80034be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003476:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a8b      	ldr	r2, [pc, #556]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe f927 	bl	80016d4 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348a:	f7fe f923 	bl	80016d4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e227      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349c:	4b82      	ldr	r3, [pc, #520]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	497c      	ldr	r1, [pc, #496]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
 80034bc:	e018      	b.n	80034f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034be:	4b7a      	ldr	r3, [pc, #488]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a79      	ldr	r2, [pc, #484]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80034c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe f903 	bl	80016d4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d2:	f7fe f8ff 	bl	80016d4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e203      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e4:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d03c      	beq.n	8003576 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350a:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe f8de 	bl	80016d4 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351c:	f7fe f8da 	bl	80016d4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1de      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800352e:	4b5e      	ldr	r3, [pc, #376]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ef      	beq.n	800351c <HAL_RCC_OscConfig+0x3ec>
 800353c:	e01b      	b.n	8003576 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353e:	4b5a      	ldr	r3, [pc, #360]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003544:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe f8c1 	bl	80016d4 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003556:	f7fe f8bd 	bl	80016d4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1c1      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003568:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 80a6 	beq.w	80036d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003588:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10d      	bne.n	80035b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	4a43      	ldr	r2, [pc, #268]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359e:	6593      	str	r3, [r2, #88]	; 0x58
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b0:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <HAL_RCC_OscConfig+0x57c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d118      	bne.n	80035ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035bc:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <HAL_RCC_OscConfig+0x57c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <HAL_RCC_OscConfig+0x57c>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c8:	f7fe f884 	bl	80016d4 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d0:	f7fe f880 	bl	80016d4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e184      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e2:	4b32      	ldr	r3, [pc, #200]	; (80036ac <HAL_RCC_OscConfig+0x57c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_RCC_OscConfig+0x4d8>
 80035f6:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003606:	e024      	b.n	8003652 <HAL_RCC_OscConfig+0x522>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d110      	bne.n	8003632 <HAL_RCC_OscConfig+0x502>
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003618:	f043 0304 	orr.w	r3, r3, #4
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003630:	e00f      	b.n	8003652 <HAL_RCC_OscConfig+0x522>
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365a:	f7fe f83b 	bl	80016d4 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe f837 	bl	80016d4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e139      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x578>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ed      	beq.n	8003662 <HAL_RCC_OscConfig+0x532>
 8003686:	e01a      	b.n	80036be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe f824 	bl	80016d4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800368e:	e00f      	b.n	80036b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fe f820 	bl	80016d4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d906      	bls.n	80036b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e122      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b0:	4b90      	ldr	r3, [pc, #576]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e8      	bne.n	8003690 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036be:	7ffb      	ldrb	r3, [r7, #31]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c4:	4b8b      	ldr	r3, [pc, #556]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	4a8a      	ldr	r2, [pc, #552]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8108 	beq.w	80038ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	2b02      	cmp	r3, #2
 80036e0:	f040 80d0 	bne.w	8003884 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036e4:	4b83      	ldr	r3, [pc, #524]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d130      	bne.n	800375a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	3b01      	subs	r3, #1
 8003704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d127      	bne.n	800375a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d11f      	bne.n	800375a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003724:	2a07      	cmp	r2, #7
 8003726:	bf14      	ite	ne
 8003728:	2201      	movne	r2, #1
 800372a:	2200      	moveq	r2, #0
 800372c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800372e:	4293      	cmp	r3, r2
 8003730:	d113      	bne.n	800375a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d109      	bne.n	800375a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	3b01      	subs	r3, #1
 8003754:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d06e      	beq.n	8003838 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d069      	beq.n	8003834 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003760:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b7      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800377c:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a5c      	ldr	r2, [pc, #368]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003786:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003788:	f7fd ffa4 	bl	80016d4 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd ffa0 	bl	80016d4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0a4      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a2:	4b54      	ldr	r3, [pc, #336]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ae:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <HAL_RCC_OscConfig+0x7c8>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037be:	3a01      	subs	r2, #1
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037c8:	0212      	lsls	r2, r2, #8
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037d0:	0852      	lsrs	r2, r2, #1
 80037d2:	3a01      	subs	r2, #1
 80037d4:	0552      	lsls	r2, r2, #21
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037dc:	0852      	lsrs	r2, r2, #1
 80037de:	3a01      	subs	r2, #1
 80037e0:	0652      	lsls	r2, r2, #25
 80037e2:	4311      	orrs	r1, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037e8:	0912      	lsrs	r2, r2, #4
 80037ea:	0452      	lsls	r2, r2, #17
 80037ec:	430a      	orrs	r2, r1
 80037ee:	4941      	ldr	r1, [pc, #260]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037f4:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3e      	ldr	r2, [pc, #248]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80037fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003800:	4b3c      	ldr	r3, [pc, #240]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800380c:	f7fd ff62 	bl	80016d4 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd ff5e 	bl	80016d4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e062      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003826:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003832:	e05a      	b.n	80038ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e059      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003838:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d152      	bne.n	80038ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800385c:	f7fd ff3a 	bl	80016d4 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fd ff36 	bl	80016d4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e03a      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x734>
 8003882:	e032      	b.n	80038ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d02d      	beq.n	80038e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a19      	ldr	r2, [pc, #100]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003894:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80038a8:	f023 0303 	bic.w	r3, r3, #3
 80038ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80038b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fd ff09 	bl	80016d4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fd ff05 	bl	80016d4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e009      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCC_OscConfig+0x7c4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x796>
 80038e4:	e001      	b.n	80038ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	f99d808c 	.word	0xf99d808c

080038fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0c8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003910:	4b66      	ldr	r3, [pc, #408]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d910      	bls.n	8003940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 0207 	bic.w	r2, r3, #7
 8003926:	4961      	ldr	r1, [pc, #388]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0b0      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d04c      	beq.n	80039e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d121      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e09e      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d115      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e092      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d107      	bne.n	8003994 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003984:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e086      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003994:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e07e      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039a4:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 0203 	bic.w	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	493f      	ldr	r1, [pc, #252]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b6:	f7fd fe8d 	bl	80016d4 <HAL_GetTick>
 80039ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039be:	f7fd fe89 	bl	80016d4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e066      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 020c 	and.w	r2, r3, #12
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d1eb      	bne.n	80039be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f2:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	492c      	ldr	r1, [pc, #176]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d210      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4924      	ldr	r1, [pc, #144]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_RCC_ClockConfig+0x1b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e036      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4918      	ldr	r1, [pc, #96]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4910      	ldr	r1, [pc, #64]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a72:	f000 f825 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a76:	4602      	mov	r2, r0
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	5ccb      	ldrb	r3, [r1, r3]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fcca 	bl	8001430 <HAL_InitTick>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	080094a4 	.word	0x080094a4
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000004 	.word	0x20000004

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d121      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d11e      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af4:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b00:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e005      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b10:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d102      	bne.n	8003b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b38:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e004      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b44:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d134      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d003      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0xac>
 8003b64:	e005      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b68:	617b      	str	r3, [r7, #20]
      break;
 8003b6a:	e005      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6e:	617b      	str	r3, [r7, #20]
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	617b      	str	r3, [r7, #20]
      break;
 8003b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	3301      	adds	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	fb02 f203 	mul.w	r2, r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	0e5b      	lsrs	r3, r3, #25
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3724      	adds	r7, #36	; 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	080094bc 	.word	0x080094bc
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	007a1200 	.word	0x007a1200

08003bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000000 	.word	0x20000000

08003bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0adb      	lsrs	r3, r3, #11
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4904      	ldr	r1, [pc, #16]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	080094b4 	.word	0x080094b4

08003c1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	220f      	movs	r2, #15
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	08db      	lsrs	r3, r3, #3
 8003c56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_RCC_GetClockConfig+0x60>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0207 	and.w	r2, r3, #7
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40022000 	.word	0x40022000

08003c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c8c:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c98:	f7ff f9e6 	bl	8003068 <HAL_PWREx_GetVoltageRange>
 8003c9c:	6178      	str	r0, [r7, #20]
 8003c9e:	e014      	b.n	8003cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cac:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cb8:	f7ff f9d6 	bl	8003068 <HAL_PWREx_GetVoltageRange>
 8003cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d10b      	bne.n	8003cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d919      	bls.n	8003d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2ba0      	cmp	r3, #160	; 0xa0
 8003cdc:	d902      	bls.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cde:	2302      	movs	r3, #2
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e013      	b.n	8003d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	e010      	b.n	8003d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d902      	bls.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e00a      	b.n	8003d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d102      	bne.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e004      	b.n	8003d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b70      	cmp	r3, #112	; 0x70
 8003d06:	d101      	bne.n	8003d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d08:	2301      	movs	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 0207 	bic.w	r2, r3, #7
 8003d14:	4909      	ldr	r1, [pc, #36]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40022000 	.word	0x40022000

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d041      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d64:	d02a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d6a:	d824      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d76:	d81e      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d80:	d010      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d82:	e018      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d84:	4b86      	ldr	r3, [pc, #536]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a85      	ldr	r2, [pc, #532]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d90:	e015      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fabb 	bl	8004314 <RCCEx_PLLSAI1_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da2:	e00c      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3320      	adds	r3, #32
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fba6 	bl	80044fc <RCCEx_PLLSAI2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc4:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd2:	4973      	ldr	r1, [pc, #460]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dda:	e001      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d041      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003df4:	d02a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003df6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dfa:	d824      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e00:	d008      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e06:	d81e      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e10:	d010      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e12:	e018      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e14:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e20:	e015      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fa73 	bl	8004314 <RCCEx_PLLSAI1_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e32:	e00c      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3320      	adds	r3, #32
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fb5e 	bl	80044fc <RCCEx_PLLSAI2_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	74fb      	strb	r3, [r7, #19]
      break;
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e54:	4b52      	ldr	r3, [pc, #328]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e62:	494f      	ldr	r1, [pc, #316]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80a0 	beq.w	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea4:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3a      	ldr	r2, [pc, #232]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fc08 	bl	80016d4 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec6:	e009      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fd fc04 	bl	80016d4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d902      	bls.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8003eda:	e005      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003edc:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ef      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d15c      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eee:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01f      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d019      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f0c:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f18:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d016      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd fbc3 	bl	80016d4 <HAL_GetTick>
 8003f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f50:	e00b      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd fbbf 	bl	80016d4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d902      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	74fb      	strb	r3, [r7, #19]
            break;
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0ec      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8e:	4904      	ldr	r1, [pc, #16]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f96:	e009      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	74bb      	strb	r3, [r7, #18]
 8003f9c:	e006      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fac:	7c7b      	ldrb	r3, [r7, #17]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d105      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb2:	4b9e      	ldr	r3, [pc, #632]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	4a9d      	ldr	r2, [pc, #628]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fca:	4b98      	ldr	r3, [pc, #608]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	f023 0203 	bic.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	4994      	ldr	r1, [pc, #592]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fec:	4b8f      	ldr	r3, [pc, #572]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f023 020c 	bic.w	r2, r3, #12
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	498c      	ldr	r1, [pc, #560]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800400e:	4b87      	ldr	r3, [pc, #540]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	4983      	ldr	r1, [pc, #524]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004030:	4b7e      	ldr	r3, [pc, #504]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	497b      	ldr	r1, [pc, #492]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004060:	4972      	ldr	r1, [pc, #456]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004074:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	496a      	ldr	r1, [pc, #424]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	4961      	ldr	r1, [pc, #388]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040b8:	4b5c      	ldr	r3, [pc, #368]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	4959      	ldr	r1, [pc, #356]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040da:	4b54      	ldr	r3, [pc, #336]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	4950      	ldr	r1, [pc, #320]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040fc:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	4948      	ldr	r1, [pc, #288]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800411e:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	493f      	ldr	r1, [pc, #252]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d028      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004140:	4b3a      	ldr	r3, [pc, #232]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414e:	4937      	ldr	r1, [pc, #220]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415e:	d106      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a31      	ldr	r2, [pc, #196]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
 800416c:	e011      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004176:	d10c      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	2101      	movs	r1, #1
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f8c8 	bl	8004314 <RCCEx_PLLSAI1_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004188:	7cfb      	ldrb	r3, [r7, #19]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d028      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	491f      	ldr	r1, [pc, #124]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041bc:	d106      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c8:	60d3      	str	r3, [r2, #12]
 80041ca:	e011      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f899 	bl	8004314 <RCCEx_PLLSAI1_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02b      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421a:	d109      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a02      	ldr	r2, [pc, #8]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004226:	60d3      	str	r3, [r2, #12]
 8004228:	e014      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004238:	d10c      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f867 	bl	8004314 <RCCEx_PLLSAI1_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800424a:	7cfb      	ldrb	r3, [r7, #19]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d02f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426e:	4928      	ldr	r1, [pc, #160]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800427a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800427e:	d10d      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f844 	bl	8004314 <RCCEx_PLLSAI1_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d014      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	74bb      	strb	r3, [r7, #18]
 800429a:	e011      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3320      	adds	r3, #32
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f925 	bl	80044fc <RCCEx_PLLSAI2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b6:	7cfb      	ldrb	r3, [r7, #19]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042da:	490d      	ldr	r1, [pc, #52]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fe:	4904      	ldr	r1, [pc, #16]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004306:	7cbb      	ldrb	r3, [r7, #18]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000

08004314 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004322:	4b75      	ldr	r3, [pc, #468]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d018      	beq.n	8004360 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800432e:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0203 	and.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d10d      	bne.n	800435a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
       ||
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004346:	4b6c      	ldr	r3, [pc, #432]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
       ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d047      	beq.n	80043ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
 800435e:	e044      	b.n	80043ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d018      	beq.n	800439a <RCCEx_PLLSAI1_Config+0x86>
 8004368:	2b03      	cmp	r3, #3
 800436a:	d825      	bhi.n	80043b8 <RCCEx_PLLSAI1_Config+0xa4>
 800436c:	2b01      	cmp	r3, #1
 800436e:	d002      	beq.n	8004376 <RCCEx_PLLSAI1_Config+0x62>
 8004370:	2b02      	cmp	r3, #2
 8004372:	d009      	beq.n	8004388 <RCCEx_PLLSAI1_Config+0x74>
 8004374:	e020      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004376:	4b60      	ldr	r3, [pc, #384]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11d      	bne.n	80043be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004386:	e01a      	b.n	80043be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004388:	4b5b      	ldr	r3, [pc, #364]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	2b00      	cmp	r3, #0
 8004392:	d116      	bne.n	80043c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004398:	e013      	b.n	80043c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800439a:	4b57      	ldr	r3, [pc, #348]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10f      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043a6:	4b54      	ldr	r3, [pc, #336]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043b6:	e006      	b.n	80043c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      break;
 80043bc:	e004      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10d      	bne.n	80043ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043ce:	4b4a      	ldr	r3, [pc, #296]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	430b      	orrs	r3, r1
 80043e4:	4944      	ldr	r1, [pc, #272]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d17d      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043f0:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a40      	ldr	r2, [pc, #256]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fc:	f7fd f96a 	bl	80016d4 <HAL_GetTick>
 8004400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004402:	e009      	b.n	8004418 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004404:	f7fd f966 	bl	80016d4 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	73fb      	strb	r3, [r7, #15]
        break;
 8004416:	e005      	b.n	8004424 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004418:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ef      	bne.n	8004404 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d160      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d111      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004430:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6892      	ldr	r2, [r2, #8]
 8004440:	0211      	lsls	r1, r2, #8
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68d2      	ldr	r2, [r2, #12]
 8004446:	0912      	lsrs	r2, r2, #4
 8004448:	0452      	lsls	r2, r2, #17
 800444a:	430a      	orrs	r2, r1
 800444c:	492a      	ldr	r1, [pc, #168]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444e:	4313      	orrs	r3, r2
 8004450:	610b      	str	r3, [r1, #16]
 8004452:	e027      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d112      	bne.n	8004480 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6892      	ldr	r2, [r2, #8]
 800446a:	0211      	lsls	r1, r2, #8
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6912      	ldr	r2, [r2, #16]
 8004470:	0852      	lsrs	r2, r2, #1
 8004472:	3a01      	subs	r2, #1
 8004474:	0552      	lsls	r2, r2, #21
 8004476:	430a      	orrs	r2, r1
 8004478:	491f      	ldr	r1, [pc, #124]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
 800447e:	e011      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004480:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004488:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6892      	ldr	r2, [r2, #8]
 8004490:	0211      	lsls	r1, r2, #8
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6952      	ldr	r2, [r2, #20]
 8004496:	0852      	lsrs	r2, r2, #1
 8004498:	3a01      	subs	r2, #1
 800449a:	0652      	lsls	r2, r2, #25
 800449c:	430a      	orrs	r2, r1
 800449e:	4916      	ldr	r1, [pc, #88]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fd f910 	bl	80016d4 <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044b6:	e009      	b.n	80044cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b8:	f7fd f90c 	bl	80016d4 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d902      	bls.n	80044cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	73fb      	strb	r3, [r7, #15]
          break;
 80044ca:	e005      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ef      	beq.n	80044b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	4904      	ldr	r1, [pc, #16]	; (80044f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000

080044fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800450a:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d018      	beq.n	8004548 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004516:	4b67      	ldr	r3, [pc, #412]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0203 	and.w	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d10d      	bne.n	8004542 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
       ||
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800452e:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
       ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d047      	beq.n	80045d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
 8004546:	e044      	b.n	80045d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d018      	beq.n	8004582 <RCCEx_PLLSAI2_Config+0x86>
 8004550:	2b03      	cmp	r3, #3
 8004552:	d825      	bhi.n	80045a0 <RCCEx_PLLSAI2_Config+0xa4>
 8004554:	2b01      	cmp	r3, #1
 8004556:	d002      	beq.n	800455e <RCCEx_PLLSAI2_Config+0x62>
 8004558:	2b02      	cmp	r3, #2
 800455a:	d009      	beq.n	8004570 <RCCEx_PLLSAI2_Config+0x74>
 800455c:	e020      	b.n	80045a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800455e:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11d      	bne.n	80045a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456e:	e01a      	b.n	80045a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004570:	4b50      	ldr	r3, [pc, #320]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d116      	bne.n	80045aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004580:	e013      	b.n	80045aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004582:	4b4c      	ldr	r3, [pc, #304]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800458e:	4b49      	ldr	r3, [pc, #292]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800459e:	e006      	b.n	80045ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      break;
 80045a4:	e004      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045a6:	bf00      	nop
 80045a8:	e002      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10d      	bne.n	80045d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	430b      	orrs	r3, r1
 80045cc:	4939      	ldr	r1, [pc, #228]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d167      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a35      	ldr	r2, [pc, #212]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e4:	f7fd f876 	bl	80016d4 <HAL_GetTick>
 80045e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ea:	e009      	b.n	8004600 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045ec:	f7fd f872 	bl	80016d4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d902      	bls.n	8004600 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	73fb      	strb	r3, [r7, #15]
        break;
 80045fe:	e005      	b.n	800460c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ef      	bne.n	80045ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d14a      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d111      	bne.n	800463c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004618:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6892      	ldr	r2, [r2, #8]
 8004628:	0211      	lsls	r1, r2, #8
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	0912      	lsrs	r2, r2, #4
 8004630:	0452      	lsls	r2, r2, #17
 8004632:	430a      	orrs	r2, r1
 8004634:	491f      	ldr	r1, [pc, #124]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	614b      	str	r3, [r1, #20]
 800463a:	e011      	b.n	8004660 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6892      	ldr	r2, [r2, #8]
 800464c:	0211      	lsls	r1, r2, #8
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6912      	ldr	r2, [r2, #16]
 8004652:	0852      	lsrs	r2, r2, #1
 8004654:	3a01      	subs	r2, #1
 8004656:	0652      	lsls	r2, r2, #25
 8004658:	430a      	orrs	r2, r1
 800465a:	4916      	ldr	r1, [pc, #88]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465c:	4313      	orrs	r3, r2
 800465e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fd f832 	bl	80016d4 <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004672:	e009      	b.n	8004688 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004674:	f7fd f82e 	bl	80016d4 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d902      	bls.n	8004688 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	73fb      	strb	r3, [r7, #15]
          break;
 8004686:	e005      	b.n	8004694 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ef      	beq.n	8004674 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4904      	ldr	r1, [pc, #16]	; (80046b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000

080046b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e049      	b.n	800475e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fe3a 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f000 fc24 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e04f      	b.n	8004820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a23      	ldr	r2, [pc, #140]	; (800482c <HAL_TIM_Base_Start_IT+0xc4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d018      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_TIM_Base_Start_IT+0xc8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_TIM_Base_Start_IT+0xcc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_TIM_Base_Start_IT+0xd0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_TIM_Base_Start_IT+0xd4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_TIM_Base_Start_IT+0xd8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d115      	bne.n	800480a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <HAL_TIM_Base_Start_IT+0xdc>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d015      	beq.n	800481c <HAL_TIM_Base_Start_IT+0xb4>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f6:	d011      	beq.n	800481c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004808:	e008      	b.n	800481c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e000      	b.n	800481e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40013400 	.word	0x40013400
 8004840:	40014000 	.word	0x40014000
 8004844:	00010007 	.word	0x00010007

08004848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e049      	b.n	80048ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f841 	bl	80048f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 fb5c 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d122      	bne.n	8004966 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d11b      	bne.n	8004966 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0202 	mvn.w	r2, #2
 8004936:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fadb 	bl	8004f08 <HAL_TIM_IC_CaptureCallback>
 8004952:	e005      	b.n	8004960 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 facd 	bl	8004ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fade 	bl	8004f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d122      	bne.n	80049ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d11b      	bne.n	80049ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0204 	mvn.w	r2, #4
 800498a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fab1 	bl	8004f08 <HAL_TIM_IC_CaptureCallback>
 80049a6:	e005      	b.n	80049b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 faa3 	bl	8004ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fab4 	bl	8004f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d122      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d11b      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f06f 0208 	mvn.w	r2, #8
 80049de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2204      	movs	r2, #4
 80049e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa87 	bl	8004f08 <HAL_TIM_IC_CaptureCallback>
 80049fa:	e005      	b.n	8004a08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fa79 	bl	8004ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa8a 	bl	8004f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d122      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d11b      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f06f 0210 	mvn.w	r2, #16
 8004a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2208      	movs	r2, #8
 8004a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fa5d 	bl	8004f08 <HAL_TIM_IC_CaptureCallback>
 8004a4e:	e005      	b.n	8004a5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fa4f 	bl	8004ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa60 	bl	8004f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d10e      	bne.n	8004a8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d107      	bne.n	8004a8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f06f 0201 	mvn.w	r2, #1
 8004a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fc fba5 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b80      	cmp	r3, #128	; 0x80
 8004a9a:	d10e      	bne.n	8004aba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d107      	bne.n	8004aba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fee1 	bl	800587c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fed4 	bl	8005890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d10e      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d107      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa0e 	bl	8004f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d10e      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0220 	mvn.w	r2, #32
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fe94 	bl	8005868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0fd      	b.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b14      	cmp	r3, #20
 8004b6e:	f200 80f0 	bhi.w	8004d52 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004bcd 	.word	0x08004bcd
 8004b7c:	08004d53 	.word	0x08004d53
 8004b80:	08004d53 	.word	0x08004d53
 8004b84:	08004d53 	.word	0x08004d53
 8004b88:	08004c0d 	.word	0x08004c0d
 8004b8c:	08004d53 	.word	0x08004d53
 8004b90:	08004d53 	.word	0x08004d53
 8004b94:	08004d53 	.word	0x08004d53
 8004b98:	08004c4f 	.word	0x08004c4f
 8004b9c:	08004d53 	.word	0x08004d53
 8004ba0:	08004d53 	.word	0x08004d53
 8004ba4:	08004d53 	.word	0x08004d53
 8004ba8:	08004c8f 	.word	0x08004c8f
 8004bac:	08004d53 	.word	0x08004d53
 8004bb0:	08004d53 	.word	0x08004d53
 8004bb4:	08004d53 	.word	0x08004d53
 8004bb8:	08004cd1 	.word	0x08004cd1
 8004bbc:	08004d53 	.word	0x08004d53
 8004bc0:	08004d53 	.word	0x08004d53
 8004bc4:	08004d53 	.word	0x08004d53
 8004bc8:	08004d11 	.word	0x08004d11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa50 	bl	8005078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0208 	orr.w	r2, r2, #8
 8004be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0204 	bic.w	r2, r2, #4
 8004bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6999      	ldr	r1, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	619a      	str	r2, [r3, #24]
      break;
 8004c0a:	e0a3      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fac0 	bl	8005198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	021a      	lsls	r2, r3, #8
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	619a      	str	r2, [r3, #24]
      break;
 8004c4c:	e082      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fb29 	bl	80052ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0208 	orr.w	r2, r2, #8
 8004c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0204 	bic.w	r2, r2, #4
 8004c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69d9      	ldr	r1, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	61da      	str	r2, [r3, #28]
      break;
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fb91 	bl	80053bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	021a      	lsls	r2, r3, #8
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	61da      	str	r2, [r3, #28]
      break;
 8004cce:	e041      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fbda 	bl	8005490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0208 	orr.w	r2, r2, #8
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0204 	bic.w	r2, r2, #4
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d0e:	e021      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fc1e 	bl	8005558 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	021a      	lsls	r2, r3, #8
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d50:	e000      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop

08004d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIM_ConfigClockSource+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e0b5      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x184>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004daa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbc:	d03e      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0xd4>
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc2:	f200 8087 	bhi.w	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dca:	f000 8085 	beq.w	8004ed8 <HAL_TIM_ConfigClockSource+0x170>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	d87f      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b70      	cmp	r3, #112	; 0x70
 8004dd6:	d01a      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0xa6>
 8004dd8:	2b70      	cmp	r3, #112	; 0x70
 8004dda:	d87b      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d050      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x11a>
 8004de0:	2b60      	cmp	r3, #96	; 0x60
 8004de2:	d877      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b50      	cmp	r3, #80	; 0x50
 8004de6:	d03c      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xfa>
 8004de8:	2b50      	cmp	r3, #80	; 0x50
 8004dea:	d873      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d058      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d86f      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b30      	cmp	r3, #48	; 0x30
 8004df6:	d064      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8004df8:	2b30      	cmp	r3, #48	; 0x30
 8004dfa:	d86b      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d060      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d867      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d05c      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d05a      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e0c:	e062      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6899      	ldr	r1, [r3, #8]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f000 fc7b 	bl	8005718 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	609a      	str	r2, [r3, #8]
      break;
 8004e3a:	e04e      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6899      	ldr	r1, [r3, #8]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f000 fc64 	bl	8005718 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e5e:	609a      	str	r2, [r3, #8]
      break;
 8004e60:	e03b      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6859      	ldr	r1, [r3, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f000 fbd8 	bl	8005624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2150      	movs	r1, #80	; 0x50
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fc31 	bl	80056e2 <TIM_ITRx_SetConfig>
      break;
 8004e80:	e02b      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fbf7 	bl	8005682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2160      	movs	r1, #96	; 0x60
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fc21 	bl	80056e2 <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e01b      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 fbb8 	bl	8005624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2140      	movs	r1, #64	; 0x40
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fc11 	bl	80056e2 <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e00b      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f000 fc08 	bl	80056e2 <TIM_ITRx_SetConfig>
        break;
 8004ed2:	e002      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004ed8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a40      	ldr	r2, [pc, #256]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3d      	ldr	r2, [pc, #244]	; (800505c <TIM_Base_SetConfig+0x118>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <TIM_Base_SetConfig+0x11c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3b      	ldr	r2, [pc, #236]	; (8005064 <TIM_Base_SetConfig+0x120>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3a      	ldr	r2, [pc, #232]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2f      	ldr	r2, [pc, #188]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01f      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	; (800505c <TIM_Base_SetConfig+0x118>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <TIM_Base_SetConfig+0x11c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <TIM_Base_SetConfig+0x120>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a29      	ldr	r2, [pc, #164]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <TIM_Base_SetConfig+0x128>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <TIM_Base_SetConfig+0x12c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <TIM_Base_SetConfig+0x130>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a12      	ldr	r2, [pc, #72]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a11      	ldr	r2, [pc, #68]	; (800506c <TIM_Base_SetConfig+0x128>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <TIM_Base_SetConfig+0x12c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a0f      	ldr	r2, [pc, #60]	; (8005074 <TIM_Base_SetConfig+0x130>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	615a      	str	r2, [r3, #20]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800

08005078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 0302 	bic.w	r3, r3, #2
 80050c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a2c      	ldr	r2, [pc, #176]	; (8005184 <TIM_OC1_SetConfig+0x10c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00f      	beq.n	80050f8 <TIM_OC1_SetConfig+0x80>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a2b      	ldr	r2, [pc, #172]	; (8005188 <TIM_OC1_SetConfig+0x110>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_OC1_SetConfig+0x80>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a2a      	ldr	r2, [pc, #168]	; (800518c <TIM_OC1_SetConfig+0x114>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_OC1_SetConfig+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a29      	ldr	r2, [pc, #164]	; (8005190 <TIM_OC1_SetConfig+0x118>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC1_SetConfig+0x80>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a28      	ldr	r2, [pc, #160]	; (8005194 <TIM_OC1_SetConfig+0x11c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d10c      	bne.n	8005112 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0308 	bic.w	r3, r3, #8
 80050fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 0304 	bic.w	r3, r3, #4
 8005110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <TIM_OC1_SetConfig+0x10c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_OC1_SetConfig+0xc2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <TIM_OC1_SetConfig+0x110>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_OC1_SetConfig+0xc2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <TIM_OC1_SetConfig+0x114>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_OC1_SetConfig+0xc2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a18      	ldr	r2, [pc, #96]	; (8005190 <TIM_OC1_SetConfig+0x118>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_OC1_SetConfig+0xc2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <TIM_OC1_SetConfig+0x11c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d111      	bne.n	800515e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0210 	bic.w	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0320 	bic.w	r3, r3, #32
 80051e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a28      	ldr	r2, [pc, #160]	; (8005298 <TIM_OC2_SetConfig+0x100>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_OC2_SetConfig+0x6c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a27      	ldr	r2, [pc, #156]	; (800529c <TIM_OC2_SetConfig+0x104>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10d      	bne.n	8005220 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <TIM_OC2_SetConfig+0x100>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC2_SetConfig+0xb0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <TIM_OC2_SetConfig+0x104>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC2_SetConfig+0xb0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <TIM_OC2_SetConfig+0x108>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC2_SetConfig+0xb0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <TIM_OC2_SetConfig+0x10c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC2_SetConfig+0xb0>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <TIM_OC2_SetConfig+0x110>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d113      	bne.n	8005270 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40013400 	.word	0x40013400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <TIM_OC3_SetConfig+0xfc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC3_SetConfig+0x6a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a26      	ldr	r2, [pc, #152]	; (80053ac <TIM_OC3_SetConfig+0x100>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10d      	bne.n	8005332 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800531c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <TIM_OC3_SetConfig+0xfc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_OC3_SetConfig+0xae>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <TIM_OC3_SetConfig+0x100>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_OC3_SetConfig+0xae>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <TIM_OC3_SetConfig+0x104>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_OC3_SetConfig+0xae>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <TIM_OC3_SetConfig+0x108>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_OC3_SetConfig+0xae>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <TIM_OC3_SetConfig+0x10c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d113      	bne.n	8005382 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40013400 	.word	0x40013400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800

080053bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <TIM_OC4_SetConfig+0xc0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_OC4_SetConfig+0x84>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a17      	ldr	r2, [pc, #92]	; (8005480 <TIM_OC4_SetConfig+0xc4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_OC4_SetConfig+0x84>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <TIM_OC4_SetConfig+0xc8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_OC4_SetConfig+0x84>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a15      	ldr	r2, [pc, #84]	; (8005488 <TIM_OC4_SetConfig+0xcc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_OC4_SetConfig+0x84>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a14      	ldr	r2, [pc, #80]	; (800548c <TIM_OC4_SetConfig+0xd0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d109      	bne.n	8005454 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	019b      	lsls	r3, r3, #6
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40013400 	.word	0x40013400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800

08005490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a17      	ldr	r2, [pc, #92]	; (8005544 <TIM_OC5_SetConfig+0xb4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00f      	beq.n	800550a <TIM_OC5_SetConfig+0x7a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a16      	ldr	r2, [pc, #88]	; (8005548 <TIM_OC5_SetConfig+0xb8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00b      	beq.n	800550a <TIM_OC5_SetConfig+0x7a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a15      	ldr	r2, [pc, #84]	; (800554c <TIM_OC5_SetConfig+0xbc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <TIM_OC5_SetConfig+0x7a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <TIM_OC5_SetConfig+0xc0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_OC5_SetConfig+0x7a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a13      	ldr	r2, [pc, #76]	; (8005554 <TIM_OC5_SetConfig+0xc4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d109      	bne.n	800551e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800

08005558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800559e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	051b      	lsls	r3, r3, #20
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a18      	ldr	r2, [pc, #96]	; (8005610 <TIM_OC6_SetConfig+0xb8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00f      	beq.n	80055d4 <TIM_OC6_SetConfig+0x7c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a17      	ldr	r2, [pc, #92]	; (8005614 <TIM_OC6_SetConfig+0xbc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <TIM_OC6_SetConfig+0x7c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a16      	ldr	r2, [pc, #88]	; (8005618 <TIM_OC6_SetConfig+0xc0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_OC6_SetConfig+0x7c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <TIM_OC6_SetConfig+0xc4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_OC6_SetConfig+0x7c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a14      	ldr	r2, [pc, #80]	; (8005620 <TIM_OC6_SetConfig+0xc8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d109      	bne.n	80055e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0201 	bic.w	r2, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f023 030a 	bic.w	r3, r3, #10
 8005660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005682:	b480      	push	{r7}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 0210 	bic.w	r2, r3, #16
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	031b      	lsls	r3, r3, #12
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f043 0307 	orr.w	r3, r3, #7
 8005704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	431a      	orrs	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4313      	orrs	r3, r2
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	609a      	str	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800576c:	2302      	movs	r3, #2
 800576e:	e068      	b.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2e      	ldr	r2, [pc, #184]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01d      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e2:	d018      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a18      	ldr	r2, [pc, #96]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a13      	ldr	r2, [pc, #76]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	4313      	orrs	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40013400 	.word	0x40013400
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40000c00 	.word	0x40000c00
 8005864:	40014000 	.word	0x40014000

08005868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b08b      	sub	sp, #44	; 0x2c
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	613b      	str	r3, [r7, #16]
  return result;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80058ca:	2320      	movs	r3, #32
 80058cc:	e003      	b.n	80058d6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	fab3 f383 	clz	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	2103      	movs	r1, #3
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	401a      	ands	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	fa93 f3a3 	rbit	r3, r3
 80058ec:	61fb      	str	r3, [r7, #28]
  return result;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80058f8:	2320      	movs	r3, #32
 80058fa:	e003      	b.n	8005904 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	fab3 f383 	clz	r3, r3
 8005902:	b2db      	uxtb	r3, r3
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	431a      	orrs	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]
}
 8005912:	bf00      	nop
 8005914:	372c      	adds	r7, #44	; 0x2c
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	431a      	orrs	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800594e:	b480      	push	{r7}
 8005950:	b08b      	sub	sp, #44	; 0x2c
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	fa93 f3a3 	rbit	r3, r3
 8005968:	613b      	str	r3, [r7, #16]
  return result;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005974:	2320      	movs	r3, #32
 8005976:	e003      	b.n	8005980 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fab3 f383 	clz	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	2103      	movs	r1, #3
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	fa93 f3a3 	rbit	r3, r3
 8005996:	61fb      	str	r3, [r7, #28]
  return result;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80059a2:	2320      	movs	r3, #32
 80059a4:	e003      	b.n	80059ae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	fab3 f383 	clz	r3, r3
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80059bc:	bf00      	nop
 80059be:	372c      	adds	r7, #44	; 0x2c
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b08b      	sub	sp, #44	; 0x2c
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	613b      	str	r3, [r7, #16]
  return result;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80059ee:	2320      	movs	r3, #32
 80059f0:	e003      	b.n	80059fa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	fab3 f383 	clz	r3, r3
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	2103      	movs	r1, #3
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	43db      	mvns	r3, r3
 8005a04:	401a      	ands	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	61fb      	str	r3, [r7, #28]
  return result;
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	e003      	b.n	8005a28 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	fab3 f383 	clz	r3, r3
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a30:	431a      	orrs	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	60da      	str	r2, [r3, #12]
}
 8005a36:	bf00      	nop
 8005a38:	372c      	adds	r7, #44	; 0x2c
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b08b      	sub	sp, #44	; 0x2c
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1a      	ldr	r2, [r3, #32]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	fa93 f3a3 	rbit	r3, r3
 8005a5c:	613b      	str	r3, [r7, #16]
  return result;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005a68:	2320      	movs	r3, #32
 8005a6a:	e003      	b.n	8005a74 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	fab3 f383 	clz	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	210f      	movs	r1, #15
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	401a      	ands	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	fa93 f3a3 	rbit	r3, r3
 8005a8a:	61fb      	str	r3, [r7, #28]
  return result;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005a96:	2320      	movs	r3, #32
 8005a98:	e003      	b.n	8005aa2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	fab3 f383 	clz	r3, r3
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005ab0:	bf00      	nop
 8005ab2:	372c      	adds	r7, #44	; 0x2c
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b08b      	sub	sp, #44	; 0x2c
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	fa93 f3a3 	rbit	r3, r3
 8005ad8:	613b      	str	r3, [r7, #16]
  return result;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005ae4:	2320      	movs	r3, #32
 8005ae6:	e003      	b.n	8005af0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	fab3 f383 	clz	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	210f      	movs	r1, #15
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	401a      	ands	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	61fb      	str	r3, [r7, #28]
  return result;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e003      	b.n	8005b20 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005b2e:	bf00      	nop
 8005b30:	372c      	adds	r7, #44	; 0x2c
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b088      	sub	sp, #32
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	fa93 f3a3 	rbit	r3, r3
 8005b50:	60fb      	str	r3, [r7, #12]
  return result;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <LL_GPIO_Init+0x26>
    return 32U;
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	e003      	b.n	8005b68 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	fab3 f383 	clz	r3, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005b6a:	e048      	b.n	8005bfe <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	2101      	movs	r1, #1
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	4013      	ands	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03a      	beq.n	8005bf8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d003      	beq.n	8005b92 <LL_GPIO_Init+0x58>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d10e      	bne.n	8005bb0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	461a      	mov	r2, r3
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fed7 	bl	800594e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6819      	ldr	r1, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff feb7 	bl	800591e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff05 	bl	80059c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d111      	bne.n	8005bea <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2bff      	cmp	r3, #255	; 0xff
 8005bca:	d807      	bhi.n	8005bdc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff ff34 	bl	8005a42 <LL_GPIO_SetAFPin_0_7>
 8005bda:	e006      	b.n	8005bea <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	461a      	mov	r2, r3
 8005be2:	69b9      	ldr	r1, [r7, #24]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff ff69 	bl	8005abc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fe56 	bl	80058a4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1af      	bne.n	8005b6c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <LL_RCC_HSI_IsReady+0x24>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c28:	d101      	bne.n	8005c2e <LL_RCC_HSI_IsReady+0x16>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <LL_RCC_HSI_IsReady+0x18>
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40021000 	.word	0x40021000

08005c40 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005c44:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <LL_RCC_LSE_IsReady+0x24>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d101      	bne.n	8005c56 <LL_RCC_LSE_IsReady+0x16>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <LL_RCC_LSE_IsReady+0x18>
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000

08005c68 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d101      	bne.n	8005c7c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40021000 	.word	0x40021000

08005c8c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <LL_RCC_MSI_GetRange+0x18>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000

08005ca8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005cc8:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <LL_RCC_GetSysClkSource+0x18>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 030c 	and.w	r3, r3, #12
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40021000 	.word	0x40021000

08005ce0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ce4:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <LL_RCC_GetAHBPrescaler+0x18>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40021000 	.word	0x40021000

08005cfc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000

08005d18 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d1c:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40021000 	.word	0x40021000

08005d34 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <LL_RCC_GetUSARTClockSource+0x24>)
 8005d3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	401a      	ands	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	4313      	orrs	r3, r2
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	40021000 	.word	0x40021000

08005d5c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <LL_RCC_GetUARTClockSource+0x24>)
 8005d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	401a      	ands	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	4313      	orrs	r3, r2
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	40021000 	.word	0x40021000

08005d84 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d88:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <LL_RCC_PLL_GetMainSource+0x18>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000

08005da0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <LL_RCC_PLL_GetN+0x18>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	0a1b      	lsrs	r3, r3, #8
 8005daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40021000 	.word	0x40021000

08005dbc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005dc0:	4b04      	ldr	r3, [pc, #16]	; (8005dd4 <LL_RCC_PLL_GetR+0x18>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40021000 	.word	0x40021000

08005dd8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <LL_RCC_PLL_GetDivider+0x18>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40021000 	.word	0x40021000

08005df4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d137      	bne.n	8005e76 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff ff94 	bl	8005d34 <LL_RCC_GetUSARTClockSource>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	f200 80b3 	bhi.w	8005f7e <LL_RCC_GetUSARTClockFreq+0x18a>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e5f 	.word	0x08005e5f
 8005e24:	08005e31 	.word	0x08005e31
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e4b 	.word	0x08005e4b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005e30:	f000 f95c 	bl	80060ec <RCC_GetSystemClockFreq>
 8005e34:	60f8      	str	r0, [r7, #12]
        break;
 8005e36:	e0b5      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005e38:	f7ff feee 	bl	8005c18 <LL_RCC_HSI_IsReady>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 809f 	beq.w	8005f82 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005e44:	4b5a      	ldr	r3, [pc, #360]	; (8005fb0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005e46:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005e48:	e09b      	b.n	8005f82 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005e4a:	f7ff fef9 	bl	8005c40 <LL_RCC_LSE_IsReady>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8098 	beq.w	8005f86 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8005e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005e5c:	e093      	b.n	8005f86 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005e5e:	f000 f945 	bl	80060ec <RCC_GetSystemClockFreq>
 8005e62:	4603      	mov	r3, r0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 f9d1 	bl	800620c <RCC_GetHCLKClockFreq>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f9f7 	bl	8006260 <RCC_GetPCLK2ClockFreq>
 8005e72:	60f8      	str	r0, [r7, #12]
        break;
 8005e74:	e096      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	d146      	bne.n	8005f0a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff59 	bl	8005d34 <LL_RCC_GetUSARTClockSource>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005e88:	2b0c      	cmp	r3, #12
 8005e8a:	d87e      	bhi.n	8005f8a <LL_RCC_GetUSARTClockFreq+0x196>
 8005e8c:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8005e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e92:	bf00      	nop
 8005e94:	08005ef3 	.word	0x08005ef3
 8005e98:	08005f8b 	.word	0x08005f8b
 8005e9c:	08005f8b 	.word	0x08005f8b
 8005ea0:	08005f8b 	.word	0x08005f8b
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005f8b 	.word	0x08005f8b
 8005eac:	08005f8b 	.word	0x08005f8b
 8005eb0:	08005f8b 	.word	0x08005f8b
 8005eb4:	08005ed1 	.word	0x08005ed1
 8005eb8:	08005f8b 	.word	0x08005f8b
 8005ebc:	08005f8b 	.word	0x08005f8b
 8005ec0:	08005f8b 	.word	0x08005f8b
 8005ec4:	08005ee1 	.word	0x08005ee1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005ec8:	f000 f910 	bl	80060ec <RCC_GetSystemClockFreq>
 8005ecc:	60f8      	str	r0, [r7, #12]
        break;
 8005ece:	e069      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005ed0:	f7ff fea2 	bl	8005c18 <LL_RCC_HSI_IsReady>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d059      	beq.n	8005f8e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8005eda:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005edc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ede:	e056      	b.n	8005f8e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005ee0:	f7ff feae 	bl	8005c40 <LL_RCC_LSE_IsReady>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d053      	beq.n	8005f92 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ef0:	e04f      	b.n	8005f92 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ef2:	f000 f8fb 	bl	80060ec <RCC_GetSystemClockFreq>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f987 	bl	800620c <RCC_GetHCLKClockFreq>
 8005efe:	4603      	mov	r3, r0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f999 	bl	8006238 <RCC_GetPCLK1ClockFreq>
 8005f06:	60f8      	str	r0, [r7, #12]
        break;
 8005f08:	e04c      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b30      	cmp	r3, #48	; 0x30
 8005f0e:	d142      	bne.n	8005f96 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff0f 	bl	8005d34 <LL_RCC_GetUSARTClockSource>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005f1c:	d01a      	beq.n	8005f54 <LL_RCC_GetUSARTClockFreq+0x160>
 8005f1e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005f22:	d83a      	bhi.n	8005f9a <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005f24:	4a23      	ldr	r2, [pc, #140]	; (8005fb4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00c      	beq.n	8005f44 <LL_RCC_GetUSARTClockFreq+0x150>
 8005f2a:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d834      	bhi.n	8005f9a <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005f30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f34:	d017      	beq.n	8005f66 <LL_RCC_GetUSARTClockFreq+0x172>
 8005f36:	4a20      	ldr	r2, [pc, #128]	; (8005fb8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d12e      	bne.n	8005f9a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005f3c:	f000 f8d6 	bl	80060ec <RCC_GetSystemClockFreq>
 8005f40:	60f8      	str	r0, [r7, #12]
          break;
 8005f42:	e02f      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005f44:	f7ff fe68 	bl	8005c18 <LL_RCC_HSI_IsReady>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d027      	beq.n	8005f9e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005f4e:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005f50:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005f52:	e024      	b.n	8005f9e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005f54:	f7ff fe74 	bl	8005c40 <LL_RCC_LSE_IsReady>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d021      	beq.n	8005fa2 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8005f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f62:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005f64:	e01d      	b.n	8005fa2 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005f66:	f000 f8c1 	bl	80060ec <RCC_GetSystemClockFreq>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 f94d 	bl	800620c <RCC_GetHCLKClockFreq>
 8005f72:	4603      	mov	r3, r0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 f95f 	bl	8006238 <RCC_GetPCLK1ClockFreq>
 8005f7a:	60f8      	str	r0, [r7, #12]
          break;
 8005f7c:	e012      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e010      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005f82:	bf00      	nop
 8005f84:	e00e      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005f86:	bf00      	nop
 8005f88:	e00c      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e00a      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005f8e:	bf00      	nop
 8005f90:	e008      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005f92:	bf00      	nop
 8005f94:	e006      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8005f96:	bf00      	nop
 8005f98:	e004      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005fa2:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	00300020 	.word	0x00300020
 8005fb8:	00300010 	.word	0x00300010

08005fbc <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2bc0      	cmp	r3, #192	; 0xc0
 8005fcc:	d136      	bne.n	800603c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff fec4 	bl	8005d5c <LL_RCC_GetUARTClockSource>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005fda:	d01a      	beq.n	8006012 <LL_RCC_GetUARTClockFreq+0x56>
 8005fdc:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005fe0:	d82e      	bhi.n	8006040 <LL_RCC_GetUARTClockFreq+0x84>
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00c      	beq.n	8006002 <LL_RCC_GetUARTClockFreq+0x46>
 8005fe8:	4a3b      	ldr	r2, [pc, #236]	; (80060d8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d828      	bhi.n	8006040 <LL_RCC_GetUARTClockFreq+0x84>
 8005fee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ff2:	d017      	beq.n	8006024 <LL_RCC_GetUARTClockFreq+0x68>
 8005ff4:	4a39      	ldr	r2, [pc, #228]	; (80060dc <LL_RCC_GetUARTClockFreq+0x120>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d122      	bne.n	8006040 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005ffa:	f000 f877 	bl	80060ec <RCC_GetSystemClockFreq>
 8005ffe:	60f8      	str	r0, [r7, #12]
        break;
 8006000:	e023      	b.n	800604a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006002:	f7ff fe09 	bl	8005c18 <LL_RCC_HSI_IsReady>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 800600c:	4b34      	ldr	r3, [pc, #208]	; (80060e0 <LL_RCC_GetUARTClockFreq+0x124>)
 800600e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006010:	e018      	b.n	8006044 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006012:	f7ff fe15 	bl	8005c40 <LL_RCC_LSE_IsReady>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 800601c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006020:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006022:	e011      	b.n	8006048 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006024:	f000 f862 	bl	80060ec <RCC_GetSystemClockFreq>
 8006028:	4603      	mov	r3, r0
 800602a:	4618      	mov	r0, r3
 800602c:	f000 f8ee 	bl	800620c <RCC_GetHCLKClockFreq>
 8006030:	4603      	mov	r3, r0
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f900 	bl	8006238 <RCC_GetPCLK1ClockFreq>
 8006038:	60f8      	str	r0, [r7, #12]
        break;
 800603a:	e006      	b.n	800604a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 800603c:	bf00      	nop
 800603e:	e004      	b.n	800604a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006048:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006050:	d136      	bne.n	80060c0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fe82 	bl	8005d5c <LL_RCC_GetUARTClockSource>
 8006058:	4603      	mov	r3, r0
 800605a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800605e:	d01a      	beq.n	8006096 <LL_RCC_GetUARTClockFreq+0xda>
 8006060:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006064:	d82e      	bhi.n	80060c4 <LL_RCC_GetUARTClockFreq+0x108>
 8006066:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <LL_RCC_GetUARTClockFreq+0x128>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00c      	beq.n	8006086 <LL_RCC_GetUARTClockFreq+0xca>
 800606c:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <LL_RCC_GetUARTClockFreq+0x128>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d828      	bhi.n	80060c4 <LL_RCC_GetUARTClockFreq+0x108>
 8006072:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006076:	d017      	beq.n	80060a8 <LL_RCC_GetUARTClockFreq+0xec>
 8006078:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <LL_RCC_GetUARTClockFreq+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d122      	bne.n	80060c4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800607e:	f000 f835 	bl	80060ec <RCC_GetSystemClockFreq>
 8006082:	60f8      	str	r0, [r7, #12]
        break;
 8006084:	e023      	b.n	80060ce <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006086:	f7ff fdc7 	bl	8005c18 <LL_RCC_HSI_IsReady>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01b      	beq.n	80060c8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006090:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <LL_RCC_GetUARTClockFreq+0x124>)
 8006092:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006094:	e018      	b.n	80060c8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006096:	f7ff fdd3 	bl	8005c40 <LL_RCC_LSE_IsReady>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80060a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060a6:	e011      	b.n	80060cc <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80060a8:	f000 f820 	bl	80060ec <RCC_GetSystemClockFreq>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f8ac 	bl	800620c <RCC_GetHCLKClockFreq>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 f8be 	bl	8006238 <RCC_GetPCLK1ClockFreq>
 80060bc:	60f8      	str	r0, [r7, #12]
        break;
 80060be:	e006      	b.n	80060ce <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80060c0:	bf00      	nop
 80060c2:	e004      	b.n	80060ce <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80060cc:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80060ce:	68fb      	ldr	r3, [r7, #12]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	00c00080 	.word	0x00c00080
 80060dc:	00c00040 	.word	0x00c00040
 80060e0:	00f42400 	.word	0x00f42400
 80060e4:	03000200 	.word	0x03000200
 80060e8:	03000100 	.word	0x03000100

080060ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80060f2:	f7ff fde7 	bl	8005cc4 <LL_RCC_GetSysClkSource>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d851      	bhi.n	80061a0 <RCC_GetSystemClockFreq+0xb4>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <RCC_GetSystemClockFreq+0x18>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006139 	.word	0x08006139
 8006108:	080061a1 	.word	0x080061a1
 800610c:	080061a1 	.word	0x080061a1
 8006110:	080061a1 	.word	0x080061a1
 8006114:	0800618d 	.word	0x0800618d
 8006118:	080061a1 	.word	0x080061a1
 800611c:	080061a1 	.word	0x080061a1
 8006120:	080061a1 	.word	0x080061a1
 8006124:	08006193 	.word	0x08006193
 8006128:	080061a1 	.word	0x080061a1
 800612c:	080061a1 	.word	0x080061a1
 8006130:	080061a1 	.word	0x080061a1
 8006134:	08006199 	.word	0x08006199
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006138:	f7ff fd96 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d111      	bne.n	8006166 <RCC_GetSystemClockFreq+0x7a>
 8006142:	f7ff fd91 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <RCC_GetSystemClockFreq+0x6a>
 800614c:	f7ff fd9e 	bl	8005c8c <LL_RCC_MSI_GetRange>
 8006150:	4603      	mov	r3, r0
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	e003      	b.n	800615e <RCC_GetSystemClockFreq+0x72>
 8006156:	f7ff fda7 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 800615a:	4603      	mov	r3, r0
 800615c:	0a1b      	lsrs	r3, r3, #8
 800615e:	4a28      	ldr	r2, [pc, #160]	; (8006200 <RCC_GetSystemClockFreq+0x114>)
 8006160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006164:	e010      	b.n	8006188 <RCC_GetSystemClockFreq+0x9c>
 8006166:	f7ff fd7f 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <RCC_GetSystemClockFreq+0x8e>
 8006170:	f7ff fd8c 	bl	8005c8c <LL_RCC_MSI_GetRange>
 8006174:	4603      	mov	r3, r0
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	e003      	b.n	8006182 <RCC_GetSystemClockFreq+0x96>
 800617a:	f7ff fd95 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 800617e:	4603      	mov	r3, r0
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <RCC_GetSystemClockFreq+0x114>)
 8006184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006188:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800618a:	e033      	b.n	80061f4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800618c:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <RCC_GetSystemClockFreq+0x118>)
 800618e:	607b      	str	r3, [r7, #4]
      break;
 8006190:	e030      	b.n	80061f4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <RCC_GetSystemClockFreq+0x11c>)
 8006194:	607b      	str	r3, [r7, #4]
      break;
 8006196:	e02d      	b.n	80061f4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006198:	f000 f876 	bl	8006288 <RCC_PLL_GetFreqDomain_SYS>
 800619c:	6078      	str	r0, [r7, #4]
      break;
 800619e:	e029      	b.n	80061f4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80061a0:	f7ff fd62 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d111      	bne.n	80061ce <RCC_GetSystemClockFreq+0xe2>
 80061aa:	f7ff fd5d 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d004      	beq.n	80061be <RCC_GetSystemClockFreq+0xd2>
 80061b4:	f7ff fd6a 	bl	8005c8c <LL_RCC_MSI_GetRange>
 80061b8:	4603      	mov	r3, r0
 80061ba:	0a1b      	lsrs	r3, r3, #8
 80061bc:	e003      	b.n	80061c6 <RCC_GetSystemClockFreq+0xda>
 80061be:	f7ff fd73 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 80061c2:	4603      	mov	r3, r0
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	4a0e      	ldr	r2, [pc, #56]	; (8006200 <RCC_GetSystemClockFreq+0x114>)
 80061c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061cc:	e010      	b.n	80061f0 <RCC_GetSystemClockFreq+0x104>
 80061ce:	f7ff fd4b 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <RCC_GetSystemClockFreq+0xf6>
 80061d8:	f7ff fd58 	bl	8005c8c <LL_RCC_MSI_GetRange>
 80061dc:	4603      	mov	r3, r0
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	e003      	b.n	80061ea <RCC_GetSystemClockFreq+0xfe>
 80061e2:	f7ff fd61 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 80061e6:	4603      	mov	r3, r0
 80061e8:	091b      	lsrs	r3, r3, #4
 80061ea:	4a05      	ldr	r2, [pc, #20]	; (8006200 <RCC_GetSystemClockFreq+0x114>)
 80061ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80061f2:	bf00      	nop
  }

  return frequency;
 80061f4:	687b      	ldr	r3, [r7, #4]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	080094bc 	.word	0x080094bc
 8006204:	00f42400 	.word	0x00f42400
 8006208:	007a1200 	.word	0x007a1200

0800620c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006214:	f7ff fd64 	bl	8005ce0 <LL_RCC_GetAHBPrescaler>
 8006218:	4603      	mov	r3, r0
 800621a:	091b      	lsrs	r3, r3, #4
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	4a04      	ldr	r2, [pc, #16]	; (8006234 <RCC_GetHCLKClockFreq+0x28>)
 8006222:	5cd3      	ldrb	r3, [r2, r3]
 8006224:	461a      	mov	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	40d3      	lsrs	r3, r2
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	080094a4 	.word	0x080094a4

08006238 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006240:	f7ff fd5c 	bl	8005cfc <LL_RCC_GetAPB1Prescaler>
 8006244:	4603      	mov	r3, r0
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	4a04      	ldr	r2, [pc, #16]	; (800625c <RCC_GetPCLK1ClockFreq+0x24>)
 800624a:	5cd3      	ldrb	r3, [r2, r3]
 800624c:	461a      	mov	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	40d3      	lsrs	r3, r2
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	080094b4 	.word	0x080094b4

08006260 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006268:	f7ff fd56 	bl	8005d18 <LL_RCC_GetAPB2Prescaler>
 800626c:	4603      	mov	r3, r0
 800626e:	0adb      	lsrs	r3, r3, #11
 8006270:	4a04      	ldr	r2, [pc, #16]	; (8006284 <RCC_GetPCLK2ClockFreq+0x24>)
 8006272:	5cd3      	ldrb	r3, [r2, r3]
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	40d3      	lsrs	r3, r2
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	080094b4 	.word	0x080094b4

08006288 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800628e:	f7ff fd79 	bl	8005d84 <LL_RCC_PLL_GetMainSource>
 8006292:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d036      	beq.n	8006308 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d836      	bhi.n	800630e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d003      	beq.n	80062ae <RCC_PLL_GetFreqDomain_SYS+0x26>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d02a      	beq.n	8006302 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80062ac:	e02f      	b.n	800630e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80062ae:	f7ff fcdb 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d111      	bne.n	80062dc <RCC_PLL_GetFreqDomain_SYS+0x54>
 80062b8:	f7ff fcd6 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <RCC_PLL_GetFreqDomain_SYS+0x44>
 80062c2:	f7ff fce3 	bl	8005c8c <LL_RCC_MSI_GetRange>
 80062c6:	4603      	mov	r3, r0
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	e003      	b.n	80062d4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80062cc:	f7ff fcec 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 80062d0:	4603      	mov	r3, r0
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	4a2f      	ldr	r2, [pc, #188]	; (8006394 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80062d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062da:	e010      	b.n	80062fe <RCC_PLL_GetFreqDomain_SYS+0x76>
 80062dc:	f7ff fcc4 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80062e6:	f7ff fcd1 	bl	8005c8c <LL_RCC_MSI_GetRange>
 80062ea:	4603      	mov	r3, r0
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	e003      	b.n	80062f8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80062f0:	f7ff fcda 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 80062f4:	4603      	mov	r3, r0
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	4a26      	ldr	r2, [pc, #152]	; (8006394 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80062fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062fe:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006300:	e02f      	b.n	8006362 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006302:	4b25      	ldr	r3, [pc, #148]	; (8006398 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006304:	607b      	str	r3, [r7, #4]
      break;
 8006306:	e02c      	b.n	8006362 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006308:	4b24      	ldr	r3, [pc, #144]	; (800639c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800630a:	607b      	str	r3, [r7, #4]
      break;
 800630c:	e029      	b.n	8006362 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800630e:	f7ff fcab 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d111      	bne.n	800633c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8006318:	f7ff fca6 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006322:	f7ff fcb3 	bl	8005c8c <LL_RCC_MSI_GetRange>
 8006326:	4603      	mov	r3, r0
 8006328:	0a1b      	lsrs	r3, r3, #8
 800632a:	e003      	b.n	8006334 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800632c:	f7ff fcbc 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006330:	4603      	mov	r3, r0
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633a:	e010      	b.n	800635e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800633c:	f7ff fc94 	bl	8005c68 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006346:	f7ff fca1 	bl	8005c8c <LL_RCC_MSI_GetRange>
 800634a:	4603      	mov	r3, r0
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	e003      	b.n	8006358 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006350:	f7ff fcaa 	bl	8005ca8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006354:	4603      	mov	r3, r0
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006360:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006362:	f7ff fd39 	bl	8005dd8 <LL_RCC_PLL_GetDivider>
 8006366:	4603      	mov	r3, r0
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	3301      	adds	r3, #1
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	fbb2 f4f3 	udiv	r4, r2, r3
 8006372:	f7ff fd15 	bl	8005da0 <LL_RCC_PLL_GetN>
 8006376:	4603      	mov	r3, r0
 8006378:	fb03 f404 	mul.w	r4, r3, r4
 800637c:	f7ff fd1e 	bl	8005dbc <LL_RCC_PLL_GetR>
 8006380:	4603      	mov	r3, r0
 8006382:	0e5b      	lsrs	r3, r3, #25
 8006384:	3301      	adds	r3, #1
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bd90      	pop	{r4, r7, pc}
 8006394:	080094bc 	.word	0x080094bc
 8006398:	00f42400 	.word	0x00f42400
 800639c:	007a1200 	.word	0x007a1200

080063a0 <LL_USART_IsEnabled>:
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <LL_USART_IsEnabled+0x18>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <LL_USART_IsEnabled+0x1a>
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <LL_USART_SetStopBitsLength>:
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	605a      	str	r2, [r3, #4]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <LL_USART_SetHWFlowCtrl>:
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	609a      	str	r2, [r3, #8]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <LL_USART_SetBaudRate>:
{
 8006412:	b480      	push	{r7}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d11a      	bne.n	800645e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	005a      	lsls	r2, r3, #1
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	441a      	add	r2, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	b29b      	uxth	r3, r3
 800643a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006442:	4013      	ands	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	b29b      	uxth	r3, r3
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	60da      	str	r2, [r3, #12]
}
 800645c:	e00a      	b.n	8006474 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	085a      	lsrs	r2, r3, #1
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	441a      	add	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	b29b      	uxth	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	60da      	str	r2, [r3, #12]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff ff84 	bl	80063a0 <LL_USART_IsEnabled>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d15b      	bne.n	8006556 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b2f      	ldr	r3, [pc, #188]	; (8006560 <LL_USART_Init+0xe0>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	6851      	ldr	r1, [r2, #4]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	68d2      	ldr	r2, [r2, #12]
 80064ae:	4311      	orrs	r1, r2
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	6912      	ldr	r2, [r2, #16]
 80064b4:	4311      	orrs	r1, r2
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	6992      	ldr	r2, [r2, #24]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ff7c 	bl	80063c6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff89 	bl	80063ec <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a21      	ldr	r2, [pc, #132]	; (8006564 <LL_USART_Init+0xe4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d104      	bne.n	80064ec <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80064e2:	2003      	movs	r0, #3
 80064e4:	f7ff fc86 	bl	8005df4 <LL_RCC_GetUSARTClockFreq>
 80064e8:	60b8      	str	r0, [r7, #8]
 80064ea:	e023      	b.n	8006534 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <LL_USART_Init+0xe8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d104      	bne.n	80064fe <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80064f4:	200c      	movs	r0, #12
 80064f6:	f7ff fc7d 	bl	8005df4 <LL_RCC_GetUSARTClockFreq>
 80064fa:	60b8      	str	r0, [r7, #8]
 80064fc:	e01a      	b.n	8006534 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a1a      	ldr	r2, [pc, #104]	; (800656c <LL_USART_Init+0xec>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d104      	bne.n	8006510 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006506:	2030      	movs	r0, #48	; 0x30
 8006508:	f7ff fc74 	bl	8005df4 <LL_RCC_GetUSARTClockFreq>
 800650c:	60b8      	str	r0, [r7, #8]
 800650e:	e011      	b.n	8006534 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a17      	ldr	r2, [pc, #92]	; (8006570 <LL_USART_Init+0xf0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d104      	bne.n	8006522 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006518:	20c0      	movs	r0, #192	; 0xc0
 800651a:	f7ff fd4f 	bl	8005fbc <LL_RCC_GetUARTClockFreq>
 800651e:	60b8      	str	r0, [r7, #8]
 8006520:	e008      	b.n	8006534 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a13      	ldr	r2, [pc, #76]	; (8006574 <LL_USART_Init+0xf4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d104      	bne.n	8006534 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800652a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800652e:	f7ff fd45 	bl	8005fbc <LL_RCC_GetUARTClockFreq>
 8006532:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff5e 	bl	8006412 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	efff69f3 	.word	0xefff69f3
 8006564:	40013800 	.word	0x40013800
 8006568:	40004400 	.word	0x40004400
 800656c:	40004800 	.word	0x40004800
 8006570:	40004c00 	.word	0x40004c00
 8006574:	40005000 	.word	0x40005000

08006578 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800658a:	2b84      	cmp	r3, #132	; 0x84
 800658c:	d005      	beq.n	800659a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800658e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	3303      	adds	r3, #3
 8006598:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80065ac:	f001 f916 	bl	80077dc <vTaskStartScheduler>
  
  return osOK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80065b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b8:	b089      	sub	sp, #36	; 0x24
 80065ba:	af04      	add	r7, sp, #16
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d020      	beq.n	800660a <osThreadCreate+0x54>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01c      	beq.n	800660a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685c      	ldr	r4, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681d      	ldr	r5, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691e      	ldr	r6, [r3, #16]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff ffc8 	bl	8006578 <makeFreeRtosPriority>
 80065e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065f2:	9202      	str	r2, [sp, #8]
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	9100      	str	r1, [sp, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4632      	mov	r2, r6
 80065fc:	4629      	mov	r1, r5
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 fdec 	bl	80071dc <xTaskCreateStatic>
 8006604:	4603      	mov	r3, r0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e01c      	b.n	8006644 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685c      	ldr	r4, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006616:	b29e      	uxth	r6, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff ffaa 	bl	8006578 <makeFreeRtosPriority>
 8006624:	4602      	mov	r2, r0
 8006626:	f107 030c 	add.w	r3, r7, #12
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	9200      	str	r2, [sp, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	4632      	mov	r2, r6
 8006632:	4629      	mov	r1, r5
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fe2e 	bl	8007296 <xTaskCreate>
 800663a:	4603      	mov	r3, r0
 800663c:	2b01      	cmp	r3, #1
 800663e:	d001      	beq.n	8006644 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006644:	68fb      	ldr	r3, [r7, #12]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800664e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <osDelay+0x16>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	e000      	b.n	8006666 <osDelay+0x18>
 8006664:	2301      	movs	r3, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f000 ff62 	bl	8007530 <vTaskDelay>
  
  return osOK;
 800666c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f103 0208 	add.w	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f103 0208 	add.w	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f103 0208 	add.w	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	601a      	str	r2, [r3, #0]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d103      	bne.n	8006738 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e00c      	b.n	8006752 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3308      	adds	r3, #8
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e002      	b.n	8006746 <vListInsert+0x2e>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	d2f6      	bcs.n	8006740 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6892      	ldr	r2, [r2, #8]
 80067a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6852      	ldr	r2, [r2, #4]
 80067aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d103      	bne.n	80067be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	1e5a      	subs	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800680a:	f001 fe33 	bl	8008474 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	3b01      	subs	r3, #1
 800683c:	68f9      	ldr	r1, [r7, #12]
 800683e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	441a      	add	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	22ff      	movs	r2, #255	; 0xff
 800684e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d114      	bne.n	800688a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01a      	beq.n	800689e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3310      	adds	r3, #16
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fa07 	bl	8007c80 <xTaskRemoveFromEventList>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d012      	beq.n	800689e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <xQueueGenericReset+0xcc>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	e009      	b.n	800689e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3310      	adds	r3, #16
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fef1 	bl	8006676 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3324      	adds	r3, #36	; 0x24
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff feec 	bl	8006676 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800689e:	f001 fe19 	bl	80084d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xQueueGenericCreate+0x2a>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	613b      	str	r3, [r7, #16]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	3348      	adds	r3, #72	; 0x48
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 fee5 	bl	80086b8 <pvPortMalloc>
 80068ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d011      	beq.n	800691a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	3348      	adds	r3, #72	; 0x48
 80068fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006908:	79fa      	ldrb	r2, [r7, #7]
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f805 	bl	8006924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800691a:	69bb      	ldr	r3, [r7, #24]
	}
 800691c:	4618      	mov	r0, r3
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e002      	b.n	8006946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006952:	2101      	movs	r1, #1
 8006954:	69b8      	ldr	r0, [r7, #24]
 8006956:	f7ff ff43 	bl	80067e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00e      	beq.n	800698e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006982:	2300      	movs	r3, #0
 8006984:	2200      	movs	r2, #0
 8006986:	2100      	movs	r1, #0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f81d 	bl	80069c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800698e:	bf00      	nop
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	4603      	mov	r3, r0
 800699e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069a0:	2301      	movs	r3, #1
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	461a      	mov	r2, r3
 80069ac:	6939      	ldr	r1, [r7, #16]
 80069ae:	6978      	ldr	r0, [r7, #20]
 80069b0:	f7ff ff7e 	bl	80068b0 <xQueueGenericCreate>
 80069b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff ffd3 	bl	8006962 <prvInitialiseMutex>

		return xNewQueue;
 80069bc:	68fb      	ldr	r3, [r7, #12]
	}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08e      	sub	sp, #56	; 0x38
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069d6:	2300      	movs	r3, #0
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericSend+0x32>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <xQueueGenericSend+0x40>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <xQueueGenericSend+0x44>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <xQueueGenericSend+0x46>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <xQueueGenericSend+0x60>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSend+0x6e>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSend+0x72>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSend+0x74>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	623b      	str	r3, [r7, #32]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a56:	f001 fad3 	bl	8008000 <xTaskGetSchedulerState>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <xQueueGenericSend+0x9e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <xQueueGenericSend+0xa2>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <xQueueGenericSend+0xa4>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	61fb      	str	r3, [r7, #28]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a86:	f001 fcf5 	bl	8008474 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <xQueueGenericSend+0xd4>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d129      	bne.n	8006af0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa2:	f000 fa8b 	bl	8006fbc <prvCopyDataToQueue>
 8006aa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d010      	beq.n	8006ad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	3324      	adds	r3, #36	; 0x24
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 f8e3 	bl	8007c80 <xTaskRemoveFromEventList>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d013      	beq.n	8006ae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ac0:	4b3f      	ldr	r3, [pc, #252]	; (8006bc0 <xQueueGenericSend+0x1f8>)
 8006ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	e00a      	b.n	8006ae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ad8:	4b39      	ldr	r3, [pc, #228]	; (8006bc0 <xQueueGenericSend+0x1f8>)
 8006ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ae8:	f001 fcf4 	bl	80084d4 <vPortExitCritical>
				return pdPASS;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e063      	b.n	8006bb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006af6:	f001 fced 	bl	80084d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e05c      	b.n	8006bb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 f91b 	bl	8007d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b12:	f001 fcdf 	bl	80084d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b16:	f000 fecb 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b1a:	f001 fcab 	bl	8008474 <vPortEnterCritical>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d103      	bne.n	8006b34 <xQueueGenericSend+0x16c>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b3a:	b25b      	sxtb	r3, r3
 8006b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b40:	d103      	bne.n	8006b4a <xQueueGenericSend+0x182>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b4a:	f001 fcc3 	bl	80084d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b4e:	1d3a      	adds	r2, r7, #4
 8006b50:	f107 0314 	add.w	r3, r7, #20
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 f90a 	bl	8007d70 <xTaskCheckForTimeOut>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d124      	bne.n	8006bac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b64:	f000 fb22 	bl	80071ac <prvIsQueueFull>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d018      	beq.n	8006ba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	3310      	adds	r3, #16
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4611      	mov	r1, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f85e 	bl	8007c38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7e:	f000 faad 	bl	80070dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b82:	f000 fea3 	bl	80078cc <xTaskResumeAll>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f47f af7c 	bne.w	8006a86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <xQueueGenericSend+0x1f8>)
 8006b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	e772      	b.n	8006a86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ba2:	f000 fa9b 	bl	80070dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ba6:	f000 fe91 	bl	80078cc <xTaskResumeAll>
 8006baa:	e76c      	b.n	8006a86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bae:	f000 fa95 	bl	80070dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bb2:	f000 fe8b 	bl	80078cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3738      	adds	r7, #56	; 0x38
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b090      	sub	sp, #64	; 0x40
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <xQueueGenericSendFromISR+0x3c>
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <xQueueGenericSendFromISR+0x40>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <xQueueGenericSendFromISR+0x42>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d103      	bne.n	8006c2e <xQueueGenericSendFromISR+0x6a>
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <xQueueGenericSendFromISR+0x6e>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueGenericSendFromISR+0x70>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	623b      	str	r3, [r7, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c4e:	f001 fcf3 	bl	8008638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c52:	f3ef 8211 	mrs	r2, BASEPRI
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	61fa      	str	r2, [r7, #28]
 8006c68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <xQueueGenericSendFromISR+0xbc>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d12f      	bne.n	8006ce0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c96:	f000 f991 	bl	8006fbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d112      	bne.n	8006cca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d016      	beq.n	8006cda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 ffe5 	bl	8007c80 <xTaskRemoveFromEventList>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00e      	beq.n	8006cda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e007      	b.n	8006cda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cce:	3301      	adds	r3, #1
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	b25a      	sxtb	r2, r3
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006cde:	e001      	b.n	8006ce4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3740      	adds	r7, #64	; 0x40
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08c      	sub	sp, #48	; 0x30
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <xQueueReceive+0x30>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	623b      	str	r3, [r7, #32]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d103      	bne.n	8006d3a <xQueueReceive+0x3e>
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xQueueReceive+0x42>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueReceive+0x44>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueReceive+0x5e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61fb      	str	r3, [r7, #28]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d5a:	f001 f951 	bl	8008000 <xTaskGetSchedulerState>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <xQueueReceive+0x6e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <xQueueReceive+0x72>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <xQueueReceive+0x74>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xQueueReceive+0x8e>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	61bb      	str	r3, [r7, #24]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d8a:	f001 fb73 	bl	8008474 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01f      	beq.n	8006dda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9e:	f000 f977 	bl	8007090 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	1e5a      	subs	r2, r3, #1
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00f      	beq.n	8006dd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	3310      	adds	r3, #16
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 ff62 	bl	8007c80 <xTaskRemoveFromEventList>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d007      	beq.n	8006dd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dc2:	4b3d      	ldr	r3, [pc, #244]	; (8006eb8 <xQueueReceive+0x1bc>)
 8006dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dd2:	f001 fb7f 	bl	80084d4 <vPortExitCritical>
				return pdPASS;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e069      	b.n	8006eae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d103      	bne.n	8006de8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006de0:	f001 fb78 	bl	80084d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e062      	b.n	8006eae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dee:	f107 0310 	add.w	r3, r7, #16
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 ffa6 	bl	8007d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dfc:	f001 fb6a 	bl	80084d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e00:	f000 fd56 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e04:	f001 fb36 	bl	8008474 <vPortEnterCritical>
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0e:	b25b      	sxtb	r3, r3
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d103      	bne.n	8006e1e <xQueueReceive+0x122>
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e24:	b25b      	sxtb	r3, r3
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d103      	bne.n	8006e34 <xQueueReceive+0x138>
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e34:	f001 fb4e 	bl	80084d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e38:	1d3a      	adds	r2, r7, #4
 8006e3a:	f107 0310 	add.w	r3, r7, #16
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 ff95 	bl	8007d70 <xTaskCheckForTimeOut>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d123      	bne.n	8006e94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4e:	f000 f997 	bl	8007180 <prvIsQueueEmpty>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d017      	beq.n	8006e88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	3324      	adds	r3, #36	; 0x24
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fee9 	bl	8007c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e68:	f000 f938 	bl	80070dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e6c:	f000 fd2e 	bl	80078cc <xTaskResumeAll>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d189      	bne.n	8006d8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e76:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <xQueueReceive+0x1bc>)
 8006e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	e780      	b.n	8006d8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8a:	f000 f927 	bl	80070dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e8e:	f000 fd1d 	bl	80078cc <xTaskResumeAll>
 8006e92:	e77a      	b.n	8006d8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e96:	f000 f921 	bl	80070dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e9a:	f000 fd17 	bl	80078cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea0:	f000 f96e 	bl	8007180 <prvIsQueueEmpty>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f43f af6f 	beq.w	8006d8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3730      	adds	r7, #48	; 0x30
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	623b      	str	r3, [r7, #32]
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <xQueueReceiveFromISR+0x3a>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <xQueueReceiveFromISR+0x3e>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueReceiveFromISR+0x40>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61fb      	str	r3, [r7, #28]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f16:	f001 fb8f 	bl	8008638 <vPortValidateInterruptPriority>
	__asm volatile
 8006f1a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	61ba      	str	r2, [r7, #24]
 8006f30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d02f      	beq.n	8006fa2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f50:	f000 f89e 	bl	8007090 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	1e5a      	subs	r2, r3, #1
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d112      	bne.n	8006f8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	3310      	adds	r3, #16
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fe84 	bl	8007c80 <xTaskRemoveFromEventList>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e007      	b.n	8006f9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f90:	3301      	adds	r3, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	b25a      	sxtb	r2, r3
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa0:	e001      	b.n	8006fa6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f383 8811 	msr	BASEPRI, r3
}
 8006fb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3738      	adds	r7, #56	; 0x38
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d14d      	bne.n	800707e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 f828 	bl	800803c <xTaskPriorityDisinherit>
 8006fec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	e043      	b.n	800707e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d119      	bne.n	8007030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6858      	ldr	r0, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	461a      	mov	r2, r3
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	f001 fd6c 	bl	8008ae4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	d32b      	bcc.n	800707e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	e026      	b.n	800707e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68d8      	ldr	r0, [r3, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	461a      	mov	r2, r3
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	f001 fd52 	bl	8008ae4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	425b      	negs	r3, r3
 800704a:	441a      	add	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d207      	bcs.n	800706c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	425b      	negs	r3, r3
 8007066:	441a      	add	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d105      	bne.n	800707e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	3b01      	subs	r3, #1
 800707c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007086:	697b      	ldr	r3, [r7, #20]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	441a      	add	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d303      	bcc.n	80070c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68d9      	ldr	r1, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	461a      	mov	r2, r3
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f001 fd08 	bl	8008ae4 <memcpy>
	}
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070e4:	f001 f9c6 	bl	8008474 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070f0:	e011      	b.n	8007116 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	; 0x24
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fdbe 	bl	8007c80 <xTaskRemoveFromEventList>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800710a:	f000 fe93 	bl	8007e34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	3b01      	subs	r3, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	dce9      	bgt.n	80070f2 <prvUnlockQueue+0x16>
 800711e:	e000      	b.n	8007122 <prvUnlockQueue+0x46>
					break;
 8007120:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	22ff      	movs	r2, #255	; 0xff
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800712a:	f001 f9d3 	bl	80084d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800712e:	f001 f9a1 	bl	8008474 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007138:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800713a:	e011      	b.n	8007160 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3310      	adds	r3, #16
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fd99 	bl	8007c80 <xTaskRemoveFromEventList>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007154:	f000 fe6e 	bl	8007e34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	3b01      	subs	r3, #1
 800715c:	b2db      	uxtb	r3, r3
 800715e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dce9      	bgt.n	800713c <prvUnlockQueue+0x60>
 8007168:	e000      	b.n	800716c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800716a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	22ff      	movs	r2, #255	; 0xff
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007174:	f001 f9ae 	bl	80084d4 <vPortExitCritical>
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007188:	f001 f974 	bl	8008474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e001      	b.n	800719e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800719e:	f001 f999 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 80071a2:	68fb      	ldr	r3, [r7, #12]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b4:	f001 f95e 	bl	8008474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d102      	bne.n	80071ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e001      	b.n	80071ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ce:	f001 f981 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 80071d2:	68fb      	ldr	r3, [r7, #12]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	; 0x38
 80071e0:	af04      	add	r7, sp, #16
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	623b      	str	r3, [r7, #32]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <xTaskCreateStatic+0x46>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	61fb      	str	r3, [r7, #28]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007222:	23b4      	movs	r3, #180	; 0xb4
 8007224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2bb4      	cmp	r3, #180	; 0xb4
 800722a:	d00a      	beq.n	8007242 <xTaskCreateStatic+0x66>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61bb      	str	r3, [r7, #24]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007242:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01e      	beq.n	8007288 <xTaskCreateStatic+0xac>
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01b      	beq.n	8007288 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007258:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2202      	movs	r2, #2
 800725e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	f107 0314 	add.w	r3, r7, #20
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f850 	bl	8007320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007282:	f000 f8eb 	bl	800745c <prvAddNewTaskToReadyList>
 8007286:	e001      	b.n	800728c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800728c:	697b      	ldr	r3, [r7, #20]
	}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007296:	b580      	push	{r7, lr}
 8007298:	b08c      	sub	sp, #48	; 0x30
 800729a:	af04      	add	r7, sp, #16
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 fa04 	bl	80086b8 <pvPortMalloc>
 80072b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00e      	beq.n	80072d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072b8:	20b4      	movs	r0, #180	; 0xb4
 80072ba:	f001 f9fd 	bl	80086b8 <pvPortMalloc>
 80072be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
 80072cc:	e005      	b.n	80072da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072ce:	6978      	ldr	r0, [r7, #20]
 80072d0:	f001 fabe 	bl	8008850 <vPortFree>
 80072d4:	e001      	b.n	80072da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d017      	beq.n	8007310 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	2300      	movs	r3, #0
 80072ec:	9303      	str	r3, [sp, #12]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	9302      	str	r3, [sp, #8]
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f80e 	bl	8007320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007304:	69f8      	ldr	r0, [r7, #28]
 8007306:	f000 f8a9 	bl	800745c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800730a:	2301      	movs	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e002      	b.n	8007316 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007316:	69bb      	ldr	r3, [r7, #24]
	}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007338:	3b01      	subs	r3, #1
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	617b      	str	r3, [r7, #20]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01f      	beq.n	80073ae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	e012      	b.n	800739a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	7819      	ldrb	r1, [r3, #0]
 800737c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	3334      	adds	r3, #52	; 0x34
 8007384:	460a      	mov	r2, r1
 8007386:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	3301      	adds	r3, #1
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	2b0f      	cmp	r3, #15
 800739e:	d9e9      	bls.n	8007374 <prvInitialiseNewTask+0x54>
 80073a0:	e000      	b.n	80073a4 <prvInitialiseNewTask+0x84>
			{
				break;
 80073a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073ac:	e003      	b.n	80073b6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	2b06      	cmp	r3, #6
 80073ba:	d901      	bls.n	80073c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073bc:	2306      	movs	r3, #6
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	2200      	movs	r2, #0
 80073d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	3304      	adds	r3, #4
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff f96d 	bl	80066b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	3318      	adds	r3, #24
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff f968 	bl	80066b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	f1c3 0207 	rsb	r2, r3, #7
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	2200      	movs	r2, #0
 8007408:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	334c      	adds	r3, #76	; 0x4c
 8007410:	2260      	movs	r2, #96	; 0x60
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fb73 	bl	8008b00 <memset>
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <prvInitialiseNewTask+0x130>)
 800741e:	651a      	str	r2, [r3, #80]	; 0x50
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <prvInitialiseNewTask+0x134>)
 8007424:	655a      	str	r2, [r3, #84]	; 0x54
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	4a0b      	ldr	r2, [pc, #44]	; (8007458 <prvInitialiseNewTask+0x138>)
 800742a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	69b8      	ldr	r0, [r7, #24]
 8007432:	f000 feef 	bl	8008214 <pxPortInitialiseStack>
 8007436:	4602      	mov	r2, r0
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007448:	bf00      	nop
 800744a:	3720      	adds	r7, #32
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	0800950c 	.word	0x0800950c
 8007454:	0800952c 	.word	0x0800952c
 8007458:	080094ec 	.word	0x080094ec

0800745c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007464:	f001 f806 	bl	8008474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007468:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <prvAddNewTaskToReadyList+0xb8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a29      	ldr	r2, [pc, #164]	; (8007514 <prvAddNewTaskToReadyList+0xb8>)
 8007470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007472:	4b29      	ldr	r3, [pc, #164]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800747a:	4a27      	ldr	r2, [pc, #156]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007480:	4b24      	ldr	r3, [pc, #144]	; (8007514 <prvAddNewTaskToReadyList+0xb8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d110      	bne.n	80074aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007488:	f000 fcf8 	bl	8007e7c <prvInitialiseTaskLists>
 800748c:	e00d      	b.n	80074aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800748e:	4b23      	ldr	r3, [pc, #140]	; (800751c <prvAddNewTaskToReadyList+0xc0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007496:	4b20      	ldr	r3, [pc, #128]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d802      	bhi.n	80074aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a4:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074aa:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <prvAddNewTaskToReadyList+0xc4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	4a1b      	ldr	r2, [pc, #108]	; (8007520 <prvAddNewTaskToReadyList+0xc4>)
 80074b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	2201      	movs	r2, #1
 80074ba:	409a      	lsls	r2, r3
 80074bc:	4b19      	ldr	r3, [pc, #100]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	4a18      	ldr	r2, [pc, #96]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <prvAddNewTaskToReadyList+0xcc>)
 80074d4:	441a      	add	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7ff f8f7 	bl	80066d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074e2:	f000 fff7 	bl	80084d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074e6:	4b0d      	ldr	r3, [pc, #52]	; (800751c <prvAddNewTaskToReadyList+0xc0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00e      	beq.n	800750c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074ee:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d207      	bcs.n	800750c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <prvAddNewTaskToReadyList+0xd0>)
 80074fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000458 	.word	0x20000458
 8007518:	20000358 	.word	0x20000358
 800751c:	20000464 	.word	0x20000464
 8007520:	20000474 	.word	0x20000474
 8007524:	20000460 	.word	0x20000460
 8007528:	2000035c 	.word	0x2000035c
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d017      	beq.n	8007572 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <vTaskDelay+0x60>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <vTaskDelay+0x30>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60bb      	str	r3, [r7, #8]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007560:	f000 f9a6 	bl	80078b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fdee 	bl	8008148 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800756c:	f000 f9ae 	bl	80078cc <xTaskResumeAll>
 8007570:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d107      	bne.n	8007588 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <vTaskDelay+0x64>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000480 	.word	0x20000480
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80075a0:	f000 ff68 	bl	8008474 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d102      	bne.n	80075b0 <vTaskSuspend+0x18>
 80075aa:	4b3c      	ldr	r3, [pc, #240]	; (800769c <vTaskSuspend+0x104>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	e000      	b.n	80075b2 <vTaskSuspend+0x1a>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff f8e6 	bl	800678a <uxListRemove>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d115      	bne.n	80075f0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c8:	4935      	ldr	r1, [pc, #212]	; (80076a0 <vTaskSuspend+0x108>)
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <vTaskSuspend+0x58>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	2201      	movs	r2, #1
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	43da      	mvns	r2, r3
 80075e6:	4b2f      	ldr	r3, [pc, #188]	; (80076a4 <vTaskSuspend+0x10c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4013      	ands	r3, r2
 80075ec:	4a2d      	ldr	r2, [pc, #180]	; (80076a4 <vTaskSuspend+0x10c>)
 80075ee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3318      	adds	r3, #24
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff f8c4 	bl	800678a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4827      	ldr	r0, [pc, #156]	; (80076a8 <vTaskSuspend+0x110>)
 800760a:	f7ff f861 	bl	80066d0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	d103      	bne.n	8007622 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007622:	f000 ff57 	bl	80084d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007626:	4b21      	ldr	r3, [pc, #132]	; (80076ac <vTaskSuspend+0x114>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800762e:	f000 ff21 	bl	8008474 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007632:	f000 fcc5 	bl	8007fc0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007636:	f000 ff4d 	bl	80084d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800763a:	4b18      	ldr	r3, [pc, #96]	; (800769c <vTaskSuspend+0x104>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	429a      	cmp	r2, r3
 8007642:	d127      	bne.n	8007694 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <vTaskSuspend+0x114>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d017      	beq.n	800767c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800764c:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <vTaskSuspend+0x118>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <vTaskSuspend+0xd2>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60bb      	str	r3, [r7, #8]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <vTaskSuspend+0x11c>)
 800766c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800767a:	e00b      	b.n	8007694 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <vTaskSuspend+0x110>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <vTaskSuspend+0x120>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d103      	bne.n	8007690 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007688:	4b04      	ldr	r3, [pc, #16]	; (800769c <vTaskSuspend+0x104>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
	}
 800768e:	e001      	b.n	8007694 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007690:	f000 fa70 	bl	8007b74 <vTaskSwitchContext>
	}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000358 	.word	0x20000358
 80076a0:	2000035c 	.word	0x2000035c
 80076a4:	20000460 	.word	0x20000460
 80076a8:	20000444 	.word	0x20000444
 80076ac:	20000464 	.word	0x20000464
 80076b0:	20000480 	.word	0x20000480
 80076b4:	e000ed04 	.word	0xe000ed04
 80076b8:	20000458 	.word	0x20000458

080076bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	60fb      	str	r3, [r7, #12]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	4a0a      	ldr	r2, [pc, #40]	; (8007718 <prvTaskIsTaskSuspended+0x5c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d10a      	bne.n	8007708 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	4a09      	ldr	r2, [pc, #36]	; (800771c <prvTaskIsTaskSuspended+0x60>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d005      	beq.n	8007708 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007708:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800770a:	4618      	mov	r0, r3
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	20000444 	.word	0x20000444
 800771c:	20000418 	.word	0x20000418

08007720 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <vTaskResume+0x28>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60bb      	str	r3, [r7, #8]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007748:	4b20      	ldr	r3, [pc, #128]	; (80077cc <vTaskResume+0xac>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	429a      	cmp	r2, r3
 8007750:	d037      	beq.n	80077c2 <vTaskResume+0xa2>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d034      	beq.n	80077c2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007758:	f000 fe8c 	bl	8008474 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f7ff ffad 	bl	80076bc <prvTaskIsTaskSuspended>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d02a      	beq.n	80077be <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3304      	adds	r3, #4
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff f80c 	bl	800678a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	2201      	movs	r2, #1
 8007778:	409a      	lsls	r2, r3
 800777a:	4b15      	ldr	r3, [pc, #84]	; (80077d0 <vTaskResume+0xb0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4313      	orrs	r3, r2
 8007780:	4a13      	ldr	r2, [pc, #76]	; (80077d0 <vTaskResume+0xb0>)
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <vTaskResume+0xb4>)
 8007792:	441a      	add	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7fe ff98 	bl	80066d0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	4b09      	ldr	r3, [pc, #36]	; (80077cc <vTaskResume+0xac>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d307      	bcc.n	80077be <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80077ae:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <vTaskResume+0xb8>)
 80077b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80077be:	f000 fe89 	bl	80084d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000358 	.word	0x20000358
 80077d0:	20000460 	.word	0x20000460
 80077d4:	2000035c 	.word	0x2000035c
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077ea:	463a      	mov	r2, r7
 80077ec:	1d39      	adds	r1, r7, #4
 80077ee:	f107 0308 	add.w	r3, r7, #8
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7f8 fd3c 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	9202      	str	r2, [sp, #8]
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	2300      	movs	r3, #0
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	2300      	movs	r3, #0
 8007808:	460a      	mov	r2, r1
 800780a:	4921      	ldr	r1, [pc, #132]	; (8007890 <vTaskStartScheduler+0xb4>)
 800780c:	4821      	ldr	r0, [pc, #132]	; (8007894 <vTaskStartScheduler+0xb8>)
 800780e:	f7ff fce5 	bl	80071dc <xTaskCreateStatic>
 8007812:	4603      	mov	r3, r0
 8007814:	4a20      	ldr	r2, [pc, #128]	; (8007898 <vTaskStartScheduler+0xbc>)
 8007816:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007818:	4b1f      	ldr	r3, [pc, #124]	; (8007898 <vTaskStartScheduler+0xbc>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007820:	2301      	movs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e001      	b.n	800782a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d11b      	bne.n	8007868 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	613b      	str	r3, [r7, #16]
}
 8007842:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007844:	4b15      	ldr	r3, [pc, #84]	; (800789c <vTaskStartScheduler+0xc0>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	334c      	adds	r3, #76	; 0x4c
 800784a:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <vTaskStartScheduler+0xc4>)
 800784c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800784e:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <vTaskStartScheduler+0xc8>)
 8007850:	f04f 32ff 	mov.w	r2, #4294967295
 8007854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <vTaskStartScheduler+0xcc>)
 8007858:	2201      	movs	r2, #1
 800785a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800785c:	4b13      	ldr	r3, [pc, #76]	; (80078ac <vTaskStartScheduler+0xd0>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007862:	f000 fd65 	bl	8008330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007866:	e00e      	b.n	8007886 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d10a      	bne.n	8007886 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <vTaskStartScheduler+0xa8>
}
 8007886:	bf00      	nop
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	0800949c 	.word	0x0800949c
 8007894:	08007e4d 	.word	0x08007e4d
 8007898:	2000047c 	.word	0x2000047c
 800789c:	20000358 	.word	0x20000358
 80078a0:	20000010 	.word	0x20000010
 80078a4:	20000478 	.word	0x20000478
 80078a8:	20000464 	.word	0x20000464
 80078ac:	2000045c 	.word	0x2000045c

080078b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <vTaskSuspendAll+0x18>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	4a03      	ldr	r2, [pc, #12]	; (80078c8 <vTaskSuspendAll+0x18>)
 80078bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078be:	bf00      	nop
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	20000480 	.word	0x20000480

080078cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078da:	4b41      	ldr	r3, [pc, #260]	; (80079e0 <xTaskResumeAll+0x114>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	603b      	str	r3, [r7, #0]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078f8:	f000 fdbc 	bl	8008474 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078fc:	4b38      	ldr	r3, [pc, #224]	; (80079e0 <xTaskResumeAll+0x114>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3b01      	subs	r3, #1
 8007902:	4a37      	ldr	r2, [pc, #220]	; (80079e0 <xTaskResumeAll+0x114>)
 8007904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007906:	4b36      	ldr	r3, [pc, #216]	; (80079e0 <xTaskResumeAll+0x114>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d161      	bne.n	80079d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800790e:	4b35      	ldr	r3, [pc, #212]	; (80079e4 <xTaskResumeAll+0x118>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d05d      	beq.n	80079d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007916:	e02e      	b.n	8007976 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007918:	4b33      	ldr	r3, [pc, #204]	; (80079e8 <xTaskResumeAll+0x11c>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3318      	adds	r3, #24
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe ff30 	bl	800678a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3304      	adds	r3, #4
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe ff2b 	bl	800678a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	2201      	movs	r2, #1
 800793a:	409a      	lsls	r2, r3
 800793c:	4b2b      	ldr	r3, [pc, #172]	; (80079ec <xTaskResumeAll+0x120>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4313      	orrs	r3, r2
 8007942:	4a2a      	ldr	r2, [pc, #168]	; (80079ec <xTaskResumeAll+0x120>)
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4a27      	ldr	r2, [pc, #156]	; (80079f0 <xTaskResumeAll+0x124>)
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3304      	adds	r3, #4
 800795a:	4619      	mov	r1, r3
 800795c:	4610      	mov	r0, r2
 800795e:	f7fe feb7 	bl	80066d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	4b23      	ldr	r3, [pc, #140]	; (80079f4 <xTaskResumeAll+0x128>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	429a      	cmp	r2, r3
 800796e:	d302      	bcc.n	8007976 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007970:	4b21      	ldr	r3, [pc, #132]	; (80079f8 <xTaskResumeAll+0x12c>)
 8007972:	2201      	movs	r2, #1
 8007974:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007976:	4b1c      	ldr	r3, [pc, #112]	; (80079e8 <xTaskResumeAll+0x11c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1cc      	bne.n	8007918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007984:	f000 fb1c 	bl	8007fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007988:	4b1c      	ldr	r3, [pc, #112]	; (80079fc <xTaskResumeAll+0x130>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007994:	f000 f836 	bl	8007a04 <xTaskIncrementTick>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800799e:	4b16      	ldr	r3, [pc, #88]	; (80079f8 <xTaskResumeAll+0x12c>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f1      	bne.n	8007994 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80079b0:	4b12      	ldr	r3, [pc, #72]	; (80079fc <xTaskResumeAll+0x130>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079b6:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <xTaskResumeAll+0x12c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079be:	2301      	movs	r3, #1
 80079c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079c2:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <xTaskResumeAll+0x134>)
 80079c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079d2:	f000 fd7f 	bl	80084d4 <vPortExitCritical>

	return xAlreadyYielded;
 80079d6:	68bb      	ldr	r3, [r7, #8]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000480 	.word	0x20000480
 80079e4:	20000458 	.word	0x20000458
 80079e8:	20000418 	.word	0x20000418
 80079ec:	20000460 	.word	0x20000460
 80079f0:	2000035c 	.word	0x2000035c
 80079f4:	20000358 	.word	0x20000358
 80079f8:	2000046c 	.word	0x2000046c
 80079fc:	20000468 	.word	0x20000468
 8007a00:	e000ed04 	.word	0xe000ed04

08007a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a0e:	4b4e      	ldr	r3, [pc, #312]	; (8007b48 <xTaskIncrementTick+0x144>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f040 808e 	bne.w	8007b34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a18:	4b4c      	ldr	r3, [pc, #304]	; (8007b4c <xTaskIncrementTick+0x148>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a20:	4a4a      	ldr	r2, [pc, #296]	; (8007b4c <xTaskIncrementTick+0x148>)
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d120      	bne.n	8007a6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a2c:	4b48      	ldr	r3, [pc, #288]	; (8007b50 <xTaskIncrementTick+0x14c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <xTaskIncrementTick+0x48>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	603b      	str	r3, [r7, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xTaskIncrementTick+0x46>
 8007a4c:	4b40      	ldr	r3, [pc, #256]	; (8007b50 <xTaskIncrementTick+0x14c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <xTaskIncrementTick+0x150>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a3e      	ldr	r2, [pc, #248]	; (8007b50 <xTaskIncrementTick+0x14c>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	4a3e      	ldr	r2, [pc, #248]	; (8007b54 <xTaskIncrementTick+0x150>)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	4b3d      	ldr	r3, [pc, #244]	; (8007b58 <xTaskIncrementTick+0x154>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a3c      	ldr	r2, [pc, #240]	; (8007b58 <xTaskIncrementTick+0x154>)
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	f000 faa9 	bl	8007fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a6e:	4b3b      	ldr	r3, [pc, #236]	; (8007b5c <xTaskIncrementTick+0x158>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d348      	bcc.n	8007b0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a78:	4b35      	ldr	r3, [pc, #212]	; (8007b50 <xTaskIncrementTick+0x14c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a82:	4b36      	ldr	r3, [pc, #216]	; (8007b5c <xTaskIncrementTick+0x158>)
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	601a      	str	r2, [r3, #0]
					break;
 8007a8a:	e03e      	b.n	8007b0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8c:	4b30      	ldr	r3, [pc, #192]	; (8007b50 <xTaskIncrementTick+0x14c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d203      	bcs.n	8007aac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aa4:	4a2d      	ldr	r2, [pc, #180]	; (8007b5c <xTaskIncrementTick+0x158>)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007aaa:	e02e      	b.n	8007b0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fe6a 	bl	800678a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d004      	beq.n	8007ac8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	3318      	adds	r3, #24
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fe61 	bl	800678a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	2201      	movs	r2, #1
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	4b23      	ldr	r3, [pc, #140]	; (8007b60 <xTaskIncrementTick+0x15c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	4a22      	ldr	r2, [pc, #136]	; (8007b60 <xTaskIncrementTick+0x15c>)
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4a1f      	ldr	r2, [pc, #124]	; (8007b64 <xTaskIncrementTick+0x160>)
 8007ae8:	441a      	add	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fe fded 	bl	80066d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afa:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <xTaskIncrementTick+0x164>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d3b9      	bcc.n	8007a78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b08:	e7b6      	b.n	8007a78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b0a:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <xTaskIncrementTick+0x164>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	4914      	ldr	r1, [pc, #80]	; (8007b64 <xTaskIncrementTick+0x160>)
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d901      	bls.n	8007b26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b22:	2301      	movs	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b26:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <xTaskIncrementTick+0x168>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	617b      	str	r3, [r7, #20]
 8007b32:	e004      	b.n	8007b3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b34:	4b0e      	ldr	r3, [pc, #56]	; (8007b70 <xTaskIncrementTick+0x16c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	4a0d      	ldr	r2, [pc, #52]	; (8007b70 <xTaskIncrementTick+0x16c>)
 8007b3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b3e:	697b      	ldr	r3, [r7, #20]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000480 	.word	0x20000480
 8007b4c:	2000045c 	.word	0x2000045c
 8007b50:	20000410 	.word	0x20000410
 8007b54:	20000414 	.word	0x20000414
 8007b58:	20000470 	.word	0x20000470
 8007b5c:	20000478 	.word	0x20000478
 8007b60:	20000460 	.word	0x20000460
 8007b64:	2000035c 	.word	0x2000035c
 8007b68:	20000358 	.word	0x20000358
 8007b6c:	2000046c 	.word	0x2000046c
 8007b70:	20000468 	.word	0x20000468

08007b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b7a:	4b29      	ldr	r3, [pc, #164]	; (8007c20 <vTaskSwitchContext+0xac>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b82:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <vTaskSwitchContext+0xb0>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b88:	e044      	b.n	8007c14 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007b8a:	4b26      	ldr	r3, [pc, #152]	; (8007c24 <vTaskSwitchContext+0xb0>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b90:	4b25      	ldr	r3, [pc, #148]	; (8007c28 <vTaskSwitchContext+0xb4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	fab3 f383 	clz	r3, r3
 8007b9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	f1c3 031f 	rsb	r3, r3, #31
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	4921      	ldr	r1, [pc, #132]	; (8007c2c <vTaskSwitchContext+0xb8>)
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	607b      	str	r3, [r7, #4]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vTaskSwitchContext+0x5a>
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4a14      	ldr	r2, [pc, #80]	; (8007c2c <vTaskSwitchContext+0xb8>)
 8007bdc:	4413      	add	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d104      	bne.n	8007c00 <vTaskSwitchContext+0x8c>
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	605a      	str	r2, [r3, #4]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	4a0a      	ldr	r2, [pc, #40]	; (8007c30 <vTaskSwitchContext+0xbc>)
 8007c08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <vTaskSwitchContext+0xbc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	334c      	adds	r3, #76	; 0x4c
 8007c10:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <vTaskSwitchContext+0xc0>)
 8007c12:	6013      	str	r3, [r2, #0]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000480 	.word	0x20000480
 8007c24:	2000046c 	.word	0x2000046c
 8007c28:	20000460 	.word	0x20000460
 8007c2c:	2000035c 	.word	0x2000035c
 8007c30:	20000358 	.word	0x20000358
 8007c34:	20000010 	.word	0x20000010

08007c38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	60fb      	str	r3, [r7, #12]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <vTaskPlaceOnEventList+0x44>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3318      	adds	r3, #24
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fe fd56 	bl	8006718 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	6838      	ldr	r0, [r7, #0]
 8007c70:	f000 fa6a 	bl	8008148 <prvAddCurrentTaskToDelayedList>
}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000358 	.word	0x20000358

08007c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	60fb      	str	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	3318      	adds	r3, #24
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fd6a 	bl	800678a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cb6:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <xTaskRemoveFromEventList+0xac>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d11c      	bne.n	8007cf8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe fd61 	bl	800678a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	2201      	movs	r2, #1
 8007cce:	409a      	lsls	r2, r3
 8007cd0:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <xTaskRemoveFromEventList+0xb0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	4a16      	ldr	r2, [pc, #88]	; (8007d30 <xTaskRemoveFromEventList+0xb0>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a13      	ldr	r2, [pc, #76]	; (8007d34 <xTaskRemoveFromEventList+0xb4>)
 8007ce8:	441a      	add	r2, r3
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fe fced 	bl	80066d0 <vListInsertEnd>
 8007cf6:	e005      	b.n	8007d04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	3318      	adds	r3, #24
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	480e      	ldr	r0, [pc, #56]	; (8007d38 <xTaskRemoveFromEventList+0xb8>)
 8007d00:	f7fe fce6 	bl	80066d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <xTaskRemoveFromEventList+0xbc>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d905      	bls.n	8007d1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d12:	2301      	movs	r3, #1
 8007d14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <xTaskRemoveFromEventList+0xc0>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e001      	b.n	8007d22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d22:	697b      	ldr	r3, [r7, #20]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000480 	.word	0x20000480
 8007d30:	20000460 	.word	0x20000460
 8007d34:	2000035c 	.word	0x2000035c
 8007d38:	20000418 	.word	0x20000418
 8007d3c:	20000358 	.word	0x20000358
 8007d40:	2000046c 	.word	0x2000046c

08007d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <vTaskInternalSetTimeOutState+0x24>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <vTaskInternalSetTimeOutState+0x28>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	605a      	str	r2, [r3, #4]
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000470 	.word	0x20000470
 8007d6c:	2000045c 	.word	0x2000045c

08007d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	613b      	str	r3, [r7, #16]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60fb      	str	r3, [r7, #12]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007db2:	f000 fb5f 	bl	8008474 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007db6:	4b1d      	ldr	r3, [pc, #116]	; (8007e2c <xTaskCheckForTimeOut+0xbc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d102      	bne.n	8007dd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	e023      	b.n	8007e1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <xTaskCheckForTimeOut+0xc0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d007      	beq.n	8007df2 <xTaskCheckForTimeOut+0x82>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d302      	bcc.n	8007df2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	e015      	b.n	8007e1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d20b      	bcs.n	8007e14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff ff9b 	bl	8007d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
 8007e12:	e004      	b.n	8007e1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e1e:	f000 fb59 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 8007e22:	69fb      	ldr	r3, [r7, #28]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3720      	adds	r7, #32
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	2000045c 	.word	0x2000045c
 8007e30:	20000470 	.word	0x20000470

08007e34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e38:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <vTaskMissedYield+0x14>)
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	2000046c 	.word	0x2000046c

08007e4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e54:	f000 f852 	bl	8007efc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <prvIdleTask+0x28>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d9f9      	bls.n	8007e54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <prvIdleTask+0x2c>)
 8007e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e70:	e7f0      	b.n	8007e54 <prvIdleTask+0x8>
 8007e72:	bf00      	nop
 8007e74:	2000035c 	.word	0x2000035c
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e82:	2300      	movs	r3, #0
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	e00c      	b.n	8007ea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4a12      	ldr	r2, [pc, #72]	; (8007edc <prvInitialiseTaskLists+0x60>)
 8007e94:	4413      	add	r3, r2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fbed 	bl	8006676 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	607b      	str	r3, [r7, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b06      	cmp	r3, #6
 8007ea6:	d9ef      	bls.n	8007e88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ea8:	480d      	ldr	r0, [pc, #52]	; (8007ee0 <prvInitialiseTaskLists+0x64>)
 8007eaa:	f7fe fbe4 	bl	8006676 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eae:	480d      	ldr	r0, [pc, #52]	; (8007ee4 <prvInitialiseTaskLists+0x68>)
 8007eb0:	f7fe fbe1 	bl	8006676 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007eb4:	480c      	ldr	r0, [pc, #48]	; (8007ee8 <prvInitialiseTaskLists+0x6c>)
 8007eb6:	f7fe fbde 	bl	8006676 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eba:	480c      	ldr	r0, [pc, #48]	; (8007eec <prvInitialiseTaskLists+0x70>)
 8007ebc:	f7fe fbdb 	bl	8006676 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ec0:	480b      	ldr	r0, [pc, #44]	; (8007ef0 <prvInitialiseTaskLists+0x74>)
 8007ec2:	f7fe fbd8 	bl	8006676 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <prvInitialiseTaskLists+0x78>)
 8007ec8:	4a05      	ldr	r2, [pc, #20]	; (8007ee0 <prvInitialiseTaskLists+0x64>)
 8007eca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <prvInitialiseTaskLists+0x7c>)
 8007ece:	4a05      	ldr	r2, [pc, #20]	; (8007ee4 <prvInitialiseTaskLists+0x68>)
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	2000035c 	.word	0x2000035c
 8007ee0:	200003e8 	.word	0x200003e8
 8007ee4:	200003fc 	.word	0x200003fc
 8007ee8:	20000418 	.word	0x20000418
 8007eec:	2000042c 	.word	0x2000042c
 8007ef0:	20000444 	.word	0x20000444
 8007ef4:	20000410 	.word	0x20000410
 8007ef8:	20000414 	.word	0x20000414

08007efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f02:	e019      	b.n	8007f38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f04:	f000 fab6 	bl	8008474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f08:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <prvCheckTasksWaitingTermination+0x50>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe fc38 	bl	800678a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <prvCheckTasksWaitingTermination+0x54>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	4a0b      	ldr	r2, [pc, #44]	; (8007f50 <prvCheckTasksWaitingTermination+0x54>)
 8007f22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f24:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <prvCheckTasksWaitingTermination+0x58>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	4a0a      	ldr	r2, [pc, #40]	; (8007f54 <prvCheckTasksWaitingTermination+0x58>)
 8007f2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f2e:	f000 fad1 	bl	80084d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f810 	bl	8007f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <prvCheckTasksWaitingTermination+0x58>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e1      	bne.n	8007f04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	2000042c 	.word	0x2000042c
 8007f50:	20000458 	.word	0x20000458
 8007f54:	20000440 	.word	0x20000440

08007f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	334c      	adds	r3, #76	; 0x4c
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fe3b 	bl	8008be0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d108      	bne.n	8007f86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fc69 	bl	8008850 <vPortFree>
				vPortFree( pxTCB );
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fc66 	bl	8008850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f84:	e018      	b.n	8007fb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d103      	bne.n	8007f98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fc5d 	bl	8008850 <vPortFree>
	}
 8007f96:	e00f      	b.n	8007fb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d00a      	beq.n	8007fb8 <prvDeleteTCB+0x60>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	60fb      	str	r3, [r7, #12]
}
 8007fb4:	bf00      	nop
 8007fb6:	e7fe      	b.n	8007fb6 <prvDeleteTCB+0x5e>
	}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <prvResetNextTaskUnblockTime+0x38>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <prvResetNextTaskUnblockTime+0x3c>)
 8007fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fd8:	e008      	b.n	8007fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fda:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <prvResetNextTaskUnblockTime+0x38>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a04      	ldr	r2, [pc, #16]	; (8007ffc <prvResetNextTaskUnblockTime+0x3c>)
 8007fea:	6013      	str	r3, [r2, #0]
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	20000410 	.word	0x20000410
 8007ffc:	20000478 	.word	0x20000478

08008000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <xTaskGetSchedulerState+0x34>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800800e:	2301      	movs	r3, #1
 8008010:	607b      	str	r3, [r7, #4]
 8008012:	e008      	b.n	8008026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008014:	4b08      	ldr	r3, [pc, #32]	; (8008038 <xTaskGetSchedulerState+0x38>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800801c:	2302      	movs	r3, #2
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	e001      	b.n	8008026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008026:	687b      	ldr	r3, [r7, #4]
	}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20000464 	.word	0x20000464
 8008038:	20000480 	.word	0x20000480

0800803c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d06e      	beq.n	8008130 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008052:	4b3a      	ldr	r3, [pc, #232]	; (800813c <xTaskPriorityDisinherit+0x100>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d00a      	beq.n	8008072 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	60bb      	str	r3, [r7, #8]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008094:	1e5a      	subs	r2, r3, #1
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d044      	beq.n	8008130 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d140      	bne.n	8008130 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fb69 	bl	800678a <uxListRemove>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d115      	bne.n	80080ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c2:	491f      	ldr	r1, [pc, #124]	; (8008140 <xTaskPriorityDisinherit+0x104>)
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xTaskPriorityDisinherit+0xae>
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	2201      	movs	r2, #1
 80080da:	fa02 f303 	lsl.w	r3, r2, r3
 80080de:	43da      	mvns	r2, r3
 80080e0:	4b18      	ldr	r3, [pc, #96]	; (8008144 <xTaskPriorityDisinherit+0x108>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4013      	ands	r3, r2
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <xTaskPriorityDisinherit+0x108>)
 80080e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	f1c3 0207 	rsb	r2, r3, #7
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	2201      	movs	r2, #1
 8008104:	409a      	lsls	r2, r3
 8008106:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <xTaskPriorityDisinherit+0x108>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4313      	orrs	r3, r2
 800810c:	4a0d      	ldr	r2, [pc, #52]	; (8008144 <xTaskPriorityDisinherit+0x108>)
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4a08      	ldr	r2, [pc, #32]	; (8008140 <xTaskPriorityDisinherit+0x104>)
 800811e:	441a      	add	r2, r3
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe fad2 	bl	80066d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008130:	697b      	ldr	r3, [r7, #20]
	}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000358 	.word	0x20000358
 8008140:	2000035c 	.word	0x2000035c
 8008144:	20000460 	.word	0x20000460

08008148 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008152:	4b29      	ldr	r3, [pc, #164]	; (80081f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008158:	4b28      	ldr	r3, [pc, #160]	; (80081fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3304      	adds	r3, #4
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe fb13 	bl	800678a <uxListRemove>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800816a:	4b24      	ldr	r3, [pc, #144]	; (80081fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	2201      	movs	r2, #1
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43da      	mvns	r2, r3
 8008178:	4b21      	ldr	r3, [pc, #132]	; (8008200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4013      	ands	r3, r2
 800817e:	4a20      	ldr	r2, [pc, #128]	; (8008200 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008180:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d10a      	bne.n	80081a0 <prvAddCurrentTaskToDelayedList+0x58>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008190:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3304      	adds	r3, #4
 8008196:	4619      	mov	r1, r3
 8008198:	481a      	ldr	r0, [pc, #104]	; (8008204 <prvAddCurrentTaskToDelayedList+0xbc>)
 800819a:	f7fe fa99 	bl	80066d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800819e:	e026      	b.n	80081ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4413      	add	r3, r2
 80081a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081a8:	4b14      	ldr	r3, [pc, #80]	; (80081fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d209      	bcs.n	80081cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b8:	4b13      	ldr	r3, [pc, #76]	; (8008208 <prvAddCurrentTaskToDelayedList+0xc0>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f7fe faa7 	bl	8006718 <vListInsert>
}
 80081ca:	e010      	b.n	80081ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <prvAddCurrentTaskToDelayedList+0xc4>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f7fe fa9d 	bl	8006718 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081de:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <prvAddCurrentTaskToDelayedList+0xc8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d202      	bcs.n	80081ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <prvAddCurrentTaskToDelayedList+0xc8>)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6013      	str	r3, [r2, #0]
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	2000045c 	.word	0x2000045c
 80081fc:	20000358 	.word	0x20000358
 8008200:	20000460 	.word	0x20000460
 8008204:	20000444 	.word	0x20000444
 8008208:	20000414 	.word	0x20000414
 800820c:	20000410 	.word	0x20000410
 8008210:	20000478 	.word	0x20000478

08008214 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3b04      	subs	r3, #4
 8008224:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800822c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3b04      	subs	r3, #4
 8008232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f023 0201 	bic.w	r2, r3, #1
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3b04      	subs	r3, #4
 8008242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008244:	4a0c      	ldr	r2, [pc, #48]	; (8008278 <pxPortInitialiseStack+0x64>)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3b14      	subs	r3, #20
 800824e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3b04      	subs	r3, #4
 800825a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f06f 0202 	mvn.w	r2, #2
 8008262:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3b20      	subs	r3, #32
 8008268:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800826a:	68fb      	ldr	r3, [r7, #12]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	0800827d 	.word	0x0800827d

0800827c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008286:	4b12      	ldr	r3, [pc, #72]	; (80082d0 <prvTaskExitError+0x54>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d00a      	beq.n	80082a6 <prvTaskExitError+0x2a>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60fb      	str	r3, [r7, #12]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <prvTaskExitError+0x28>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	60bb      	str	r3, [r7, #8]
}
 80082b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082ba:	bf00      	nop
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0fc      	beq.n	80082bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082c2:	bf00      	nop
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	2000000c 	.word	0x2000000c
	...

080082e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <pxCurrentTCBConst2>)
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	6808      	ldr	r0, [r1, #0]
 80082e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ea:	f380 8809 	msr	PSP, r0
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f04f 0000 	mov.w	r0, #0
 80082f6:	f380 8811 	msr	BASEPRI, r0
 80082fa:	4770      	bx	lr
 80082fc:	f3af 8000 	nop.w

08008300 <pxCurrentTCBConst2>:
 8008300:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop

08008308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008308:	4808      	ldr	r0, [pc, #32]	; (800832c <prvPortStartFirstTask+0x24>)
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	6800      	ldr	r0, [r0, #0]
 800830e:	f380 8808 	msr	MSP, r0
 8008312:	f04f 0000 	mov.w	r0, #0
 8008316:	f380 8814 	msr	CONTROL, r0
 800831a:	b662      	cpsie	i
 800831c:	b661      	cpsie	f
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	df00      	svc	0
 8008328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800832a:	bf00      	nop
 800832c:	e000ed08 	.word	0xe000ed08

08008330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008336:	4b46      	ldr	r3, [pc, #280]	; (8008450 <xPortStartScheduler+0x120>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a46      	ldr	r2, [pc, #280]	; (8008454 <xPortStartScheduler+0x124>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d10a      	bne.n	8008356 <xPortStartScheduler+0x26>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008356:	4b3e      	ldr	r3, [pc, #248]	; (8008450 <xPortStartScheduler+0x120>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a3f      	ldr	r2, [pc, #252]	; (8008458 <xPortStartScheduler+0x128>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10a      	bne.n	8008376 <xPortStartScheduler+0x46>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	60fb      	str	r3, [r7, #12]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008376:	4b39      	ldr	r3, [pc, #228]	; (800845c <xPortStartScheduler+0x12c>)
 8008378:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4b31      	ldr	r3, [pc, #196]	; (8008460 <xPortStartScheduler+0x130>)
 800839c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800839e:	4b31      	ldr	r3, [pc, #196]	; (8008464 <xPortStartScheduler+0x134>)
 80083a0:	2207      	movs	r2, #7
 80083a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083a4:	e009      	b.n	80083ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80083a6:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <xPortStartScheduler+0x134>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	4a2d      	ldr	r2, [pc, #180]	; (8008464 <xPortStartScheduler+0x134>)
 80083ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c2:	2b80      	cmp	r3, #128	; 0x80
 80083c4:	d0ef      	beq.n	80083a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083c6:	4b27      	ldr	r3, [pc, #156]	; (8008464 <xPortStartScheduler+0x134>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f1c3 0307 	rsb	r3, r3, #7
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d00a      	beq.n	80083e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60bb      	str	r3, [r7, #8]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083e8:	4b1e      	ldr	r3, [pc, #120]	; (8008464 <xPortStartScheduler+0x134>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <xPortStartScheduler+0x134>)
 80083f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083f2:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <xPortStartScheduler+0x134>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083fa:	4a1a      	ldr	r2, [pc, #104]	; (8008464 <xPortStartScheduler+0x134>)
 80083fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008406:	4b18      	ldr	r3, [pc, #96]	; (8008468 <xPortStartScheduler+0x138>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a17      	ldr	r2, [pc, #92]	; (8008468 <xPortStartScheduler+0x138>)
 800840c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008412:	4b15      	ldr	r3, [pc, #84]	; (8008468 <xPortStartScheduler+0x138>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a14      	ldr	r2, [pc, #80]	; (8008468 <xPortStartScheduler+0x138>)
 8008418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800841c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800841e:	f000 f8dd 	bl	80085dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008422:	4b12      	ldr	r3, [pc, #72]	; (800846c <xPortStartScheduler+0x13c>)
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008428:	f000 f8fc 	bl	8008624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800842c:	4b10      	ldr	r3, [pc, #64]	; (8008470 <xPortStartScheduler+0x140>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0f      	ldr	r2, [pc, #60]	; (8008470 <xPortStartScheduler+0x140>)
 8008432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008436:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008438:	f7ff ff66 	bl	8008308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800843c:	f7ff fb9a 	bl	8007b74 <vTaskSwitchContext>
	prvTaskExitError();
 8008440:	f7ff ff1c 	bl	800827c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	e000ed00 	.word	0xe000ed00
 8008454:	410fc271 	.word	0x410fc271
 8008458:	410fc270 	.word	0x410fc270
 800845c:	e000e400 	.word	0xe000e400
 8008460:	20000484 	.word	0x20000484
 8008464:	20000488 	.word	0x20000488
 8008468:	e000ed20 	.word	0xe000ed20
 800846c:	2000000c 	.word	0x2000000c
 8008470:	e000ef34 	.word	0xe000ef34

08008474 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	607b      	str	r3, [r7, #4]
}
 800848c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800848e:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <vPortEnterCritical+0x58>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <vPortEnterCritical+0x58>)
 8008496:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008498:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <vPortEnterCritical+0x58>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d10f      	bne.n	80084c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <vPortEnterCritical+0x5c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	603b      	str	r3, [r7, #0]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <vPortEnterCritical+0x4a>
	}
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	2000000c 	.word	0x2000000c
 80084d0:	e000ed04 	.word	0xe000ed04

080084d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084da:	4b12      	ldr	r3, [pc, #72]	; (8008524 <vPortExitCritical+0x50>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <vPortExitCritical+0x24>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	607b      	str	r3, [r7, #4]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084f8:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <vPortExitCritical+0x50>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4a09      	ldr	r2, [pc, #36]	; (8008524 <vPortExitCritical+0x50>)
 8008500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008502:	4b08      	ldr	r3, [pc, #32]	; (8008524 <vPortExitCritical+0x50>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <vPortExitCritical+0x42>
 800850a:	2300      	movs	r3, #0
 800850c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f383 8811 	msr	BASEPRI, r3
}
 8008514:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	2000000c 	.word	0x2000000c
	...

08008530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008530:	f3ef 8009 	mrs	r0, PSP
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <pxCurrentTCBConst>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	f01e 0f10 	tst.w	lr, #16
 8008540:	bf08      	it	eq
 8008542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	6010      	str	r0, [r2, #0]
 800854c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008554:	f380 8811 	msr	BASEPRI, r0
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f7ff fb08 	bl	8007b74 <vTaskSwitchContext>
 8008564:	f04f 0000 	mov.w	r0, #0
 8008568:	f380 8811 	msr	BASEPRI, r0
 800856c:	bc09      	pop	{r0, r3}
 800856e:	6819      	ldr	r1, [r3, #0]
 8008570:	6808      	ldr	r0, [r1, #0]
 8008572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008576:	f01e 0f10 	tst.w	lr, #16
 800857a:	bf08      	it	eq
 800857c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008580:	f380 8809 	msr	PSP, r0
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst>:
 8008590:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	607b      	str	r3, [r7, #4]
}
 80085b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085b2:	f7ff fa27 	bl	8007a04 <xTaskIncrementTick>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <SysTick_Handler+0x40>)
 80085be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	2300      	movs	r3, #0
 80085c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	f383 8811 	msr	BASEPRI, r3
}
 80085ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085e0:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <vPortSetupTimerInterrupt+0x34>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085e6:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <vPortSetupTimerInterrupt+0x38>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <vPortSetupTimerInterrupt+0x3c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a0a      	ldr	r2, [pc, #40]	; (800861c <vPortSetupTimerInterrupt+0x40>)
 80085f2:	fba2 2303 	umull	r2, r3, r2, r3
 80085f6:	099b      	lsrs	r3, r3, #6
 80085f8:	4a09      	ldr	r2, [pc, #36]	; (8008620 <vPortSetupTimerInterrupt+0x44>)
 80085fa:	3b01      	subs	r3, #1
 80085fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085fe:	4b04      	ldr	r3, [pc, #16]	; (8008610 <vPortSetupTimerInterrupt+0x34>)
 8008600:	2207      	movs	r2, #7
 8008602:	601a      	str	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	e000e010 	.word	0xe000e010
 8008614:	e000e018 	.word	0xe000e018
 8008618:	20000000 	.word	0x20000000
 800861c:	10624dd3 	.word	0x10624dd3
 8008620:	e000e014 	.word	0xe000e014

08008624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008634 <vPortEnableVFP+0x10>
 8008628:	6801      	ldr	r1, [r0, #0]
 800862a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800862e:	6001      	str	r1, [r0, #0]
 8008630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008632:	bf00      	nop
 8008634:	e000ed88 	.word	0xe000ed88

08008638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800863e:	f3ef 8305 	mrs	r3, IPSR
 8008642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d914      	bls.n	8008674 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800864a:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <vPortValidateInterruptPriority+0x70>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008654:	4b15      	ldr	r3, [pc, #84]	; (80086ac <vPortValidateInterruptPriority+0x74>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	7afa      	ldrb	r2, [r7, #11]
 800865a:	429a      	cmp	r2, r3
 800865c:	d20a      	bcs.n	8008674 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	607b      	str	r3, [r7, #4]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008674:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <vPortValidateInterruptPriority+0x78>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800867c:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <vPortValidateInterruptPriority+0x7c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d90a      	bls.n	800869a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	603b      	str	r3, [r7, #0]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <vPortValidateInterruptPriority+0x60>
	}
 800869a:	bf00      	nop
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	e000e3f0 	.word	0xe000e3f0
 80086ac:	20000484 	.word	0x20000484
 80086b0:	e000ed0c 	.word	0xe000ed0c
 80086b4:	20000488 	.word	0x20000488

080086b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086c4:	f7ff f8f4 	bl	80078b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086c8:	4b5b      	ldr	r3, [pc, #364]	; (8008838 <pvPortMalloc+0x180>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086d0:	f000 f920 	bl	8008914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086d4:	4b59      	ldr	r3, [pc, #356]	; (800883c <pvPortMalloc+0x184>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4013      	ands	r3, r2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f040 8093 	bne.w	8008808 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01d      	beq.n	8008724 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086e8:	2208      	movs	r2, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4413      	add	r3, r2
 80086ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d014      	beq.n	8008724 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f023 0307 	bic.w	r3, r3, #7
 8008700:	3308      	adds	r3, #8
 8008702:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <pvPortMalloc+0x6c>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	617b      	str	r3, [r7, #20]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d06e      	beq.n	8008808 <pvPortMalloc+0x150>
 800872a:	4b45      	ldr	r3, [pc, #276]	; (8008840 <pvPortMalloc+0x188>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d869      	bhi.n	8008808 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008734:	4b43      	ldr	r3, [pc, #268]	; (8008844 <pvPortMalloc+0x18c>)
 8008736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008738:	4b42      	ldr	r3, [pc, #264]	; (8008844 <pvPortMalloc+0x18c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800873e:	e004      	b.n	800874a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d903      	bls.n	800875c <pvPortMalloc+0xa4>
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f1      	bne.n	8008740 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800875c:	4b36      	ldr	r3, [pc, #216]	; (8008838 <pvPortMalloc+0x180>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008762:	429a      	cmp	r2, r3
 8008764:	d050      	beq.n	8008808 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2208      	movs	r2, #8
 800876c:	4413      	add	r3, r2
 800876e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	2308      	movs	r3, #8
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	429a      	cmp	r2, r3
 8008786:	d91f      	bls.n	80087c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <pvPortMalloc+0xf8>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	613b      	str	r3, [r7, #16]
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	1ad2      	subs	r2, r2, r3
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087c2:	69b8      	ldr	r0, [r7, #24]
 80087c4:	f000 f908 	bl	80089d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087c8:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <pvPortMalloc+0x188>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	4a1b      	ldr	r2, [pc, #108]	; (8008840 <pvPortMalloc+0x188>)
 80087d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087d6:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <pvPortMalloc+0x188>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <pvPortMalloc+0x190>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d203      	bcs.n	80087ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087e2:	4b17      	ldr	r3, [pc, #92]	; (8008840 <pvPortMalloc+0x188>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a18      	ldr	r2, [pc, #96]	; (8008848 <pvPortMalloc+0x190>)
 80087e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	4b13      	ldr	r3, [pc, #76]	; (800883c <pvPortMalloc+0x184>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087fe:	4b13      	ldr	r3, [pc, #76]	; (800884c <pvPortMalloc+0x194>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	4a11      	ldr	r2, [pc, #68]	; (800884c <pvPortMalloc+0x194>)
 8008806:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008808:	f7ff f860 	bl	80078cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <pvPortMalloc+0x174>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	60fb      	str	r3, [r7, #12]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <pvPortMalloc+0x172>
	return pvReturn;
 800882c:	69fb      	ldr	r3, [r7, #28]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3728      	adds	r7, #40	; 0x28
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	2000104c 	.word	0x2000104c
 800883c:	20001060 	.word	0x20001060
 8008840:	20001050 	.word	0x20001050
 8008844:	20001044 	.word	0x20001044
 8008848:	20001054 	.word	0x20001054
 800884c:	20001058 	.word	0x20001058

08008850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d04d      	beq.n	80088fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008862:	2308      	movs	r3, #8
 8008864:	425b      	negs	r3, r3
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4413      	add	r3, r2
 800886a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	4b24      	ldr	r3, [pc, #144]	; (8008908 <vPortFree+0xb8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4013      	ands	r3, r2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <vPortFree+0x44>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	60fb      	str	r3, [r7, #12]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <vPortFree+0x62>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	60bb      	str	r3, [r7, #8]
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	4b14      	ldr	r3, [pc, #80]	; (8008908 <vPortFree+0xb8>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01e      	beq.n	80088fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11a      	bne.n	80088fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <vPortFree+0xb8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	43db      	mvns	r3, r3
 80088d2:	401a      	ands	r2, r3
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088d8:	f7fe ffea 	bl	80078b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <vPortFree+0xbc>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4413      	add	r3, r2
 80088e6:	4a09      	ldr	r2, [pc, #36]	; (800890c <vPortFree+0xbc>)
 80088e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088ea:	6938      	ldr	r0, [r7, #16]
 80088ec:	f000 f874 	bl	80089d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <vPortFree+0xc0>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a06      	ldr	r2, [pc, #24]	; (8008910 <vPortFree+0xc0>)
 80088f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088fa:	f7fe ffe7 	bl	80078cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088fe:	bf00      	nop
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20001060 	.word	0x20001060
 800890c:	20001050 	.word	0x20001050
 8008910:	2000105c 	.word	0x2000105c

08008914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800891a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800891e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <prvHeapInit+0xac>)
 8008922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3307      	adds	r3, #7
 8008932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0307 	bic.w	r3, r3, #7
 800893a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	4a1f      	ldr	r2, [pc, #124]	; (80089c0 <prvHeapInit+0xac>)
 8008944:	4413      	add	r3, r2
 8008946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800894c:	4a1d      	ldr	r2, [pc, #116]	; (80089c4 <prvHeapInit+0xb0>)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008952:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <prvHeapInit+0xb0>)
 8008954:	2200      	movs	r2, #0
 8008956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	4413      	add	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008960:	2208      	movs	r2, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <prvHeapInit+0xb4>)
 8008974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <prvHeapInit+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2200      	movs	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <prvHeapInit+0xb4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008994:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvHeapInit+0xb4>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	; (80089cc <prvHeapInit+0xb8>)
 80089a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <prvHeapInit+0xbc>)
 80089aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <prvHeapInit+0xc0>)
 80089ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	2000048c 	.word	0x2000048c
 80089c4:	20001044 	.word	0x20001044
 80089c8:	2000104c 	.word	0x2000104c
 80089cc:	20001054 	.word	0x20001054
 80089d0:	20001050 	.word	0x20001050
 80089d4:	20001060 	.word	0x20001060

080089d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089e0:	4b28      	ldr	r3, [pc, #160]	; (8008a84 <prvInsertBlockIntoFreeList+0xac>)
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e002      	b.n	80089ec <prvInsertBlockIntoFreeList+0x14>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d8f7      	bhi.n	80089e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d108      	bne.n	8008a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	441a      	add	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d118      	bne.n	8008a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d00d      	beq.n	8008a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	441a      	add	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	e008      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e003      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d002      	beq.n	8008a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20001044 	.word	0x20001044
 8008a88:	2000104c 	.word	0x2000104c

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	; (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000010 	.word	0x20000010

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4d0d      	ldr	r5, [pc, #52]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4d0b      	ldr	r5, [pc, #44]	; (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	; (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 fcb8 	bl	8009420 <_init>
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08009580 	.word	0x08009580
 8008ad4:	08009580 	.word	0x08009580
 8008ad8:	08009580 	.word	0x08009580
 8008adc:	08009584 	.word	0x08009584

08008ae0 <__retarget_lock_acquire_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <__retarget_lock_release_recursive>:
 8008ae2:	4770      	bx	lr

08008ae4 <memcpy>:
 8008ae4:	440a      	add	r2, r1
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aec:	d100      	bne.n	8008af0 <memcpy+0xc>
 8008aee:	4770      	bx	lr
 8008af0:	b510      	push	{r4, lr}
 8008af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008afa:	4291      	cmp	r1, r2
 8008afc:	d1f9      	bne.n	8008af2 <memcpy+0xe>
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <memset>:
 8008b00:	4402      	add	r2, r0
 8008b02:	4603      	mov	r3, r0
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <memset+0xa>
 8008b08:	4770      	bx	lr
 8008b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0e:	e7f9      	b.n	8008b04 <memset+0x4>

08008b10 <_malloc_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	1ccd      	adds	r5, r1, #3
 8008b14:	f025 0503 	bic.w	r5, r5, #3
 8008b18:	3508      	adds	r5, #8
 8008b1a:	2d0c      	cmp	r5, #12
 8008b1c:	bf38      	it	cc
 8008b1e:	250c      	movcc	r5, #12
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	4606      	mov	r6, r0
 8008b24:	db01      	blt.n	8008b2a <_malloc_r+0x1a>
 8008b26:	42a9      	cmp	r1, r5
 8008b28:	d903      	bls.n	8008b32 <_malloc_r+0x22>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	2000      	movs	r0, #0
 8008b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b32:	f000 f8e1 	bl	8008cf8 <__malloc_lock>
 8008b36:	4921      	ldr	r1, [pc, #132]	; (8008bbc <_malloc_r+0xac>)
 8008b38:	680a      	ldr	r2, [r1, #0]
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	b99c      	cbnz	r4, 8008b66 <_malloc_r+0x56>
 8008b3e:	4f20      	ldr	r7, [pc, #128]	; (8008bc0 <_malloc_r+0xb0>)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	b923      	cbnz	r3, 8008b4e <_malloc_r+0x3e>
 8008b44:	4621      	mov	r1, r4
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 f8a6 	bl	8008c98 <_sbrk_r>
 8008b4c:	6038      	str	r0, [r7, #0]
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f8a1 	bl	8008c98 <_sbrk_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d123      	bne.n	8008ba2 <_malloc_r+0x92>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 f8d0 	bl	8008d04 <__malloc_unlock>
 8008b64:	e7e3      	b.n	8008b2e <_malloc_r+0x1e>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	1b5b      	subs	r3, r3, r5
 8008b6a:	d417      	bmi.n	8008b9c <_malloc_r+0x8c>
 8008b6c:	2b0b      	cmp	r3, #11
 8008b6e:	d903      	bls.n	8008b78 <_malloc_r+0x68>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	441c      	add	r4, r3
 8008b74:	6025      	str	r5, [r4, #0]
 8008b76:	e004      	b.n	8008b82 <_malloc_r+0x72>
 8008b78:	6863      	ldr	r3, [r4, #4]
 8008b7a:	42a2      	cmp	r2, r4
 8008b7c:	bf0c      	ite	eq
 8008b7e:	600b      	streq	r3, [r1, #0]
 8008b80:	6053      	strne	r3, [r2, #4]
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f8be 	bl	8008d04 <__malloc_unlock>
 8008b88:	f104 000b 	add.w	r0, r4, #11
 8008b8c:	1d23      	adds	r3, r4, #4
 8008b8e:	f020 0007 	bic.w	r0, r0, #7
 8008b92:	1ac2      	subs	r2, r0, r3
 8008b94:	d0cc      	beq.n	8008b30 <_malloc_r+0x20>
 8008b96:	1a1b      	subs	r3, r3, r0
 8008b98:	50a3      	str	r3, [r4, r2]
 8008b9a:	e7c9      	b.n	8008b30 <_malloc_r+0x20>
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	6864      	ldr	r4, [r4, #4]
 8008ba0:	e7cc      	b.n	8008b3c <_malloc_r+0x2c>
 8008ba2:	1cc4      	adds	r4, r0, #3
 8008ba4:	f024 0403 	bic.w	r4, r4, #3
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d0e3      	beq.n	8008b74 <_malloc_r+0x64>
 8008bac:	1a21      	subs	r1, r4, r0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f872 	bl	8008c98 <_sbrk_r>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d1dd      	bne.n	8008b74 <_malloc_r+0x64>
 8008bb8:	e7cf      	b.n	8008b5a <_malloc_r+0x4a>
 8008bba:	bf00      	nop
 8008bbc:	20001064 	.word	0x20001064
 8008bc0:	20001068 	.word	0x20001068

08008bc4 <cleanup_glue>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	6809      	ldr	r1, [r1, #0]
 8008bca:	4605      	mov	r5, r0
 8008bcc:	b109      	cbz	r1, 8008bd2 <cleanup_glue+0xe>
 8008bce:	f7ff fff9 	bl	8008bc4 <cleanup_glue>
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bda:	f000 b899 	b.w	8008d10 <_free_r>
	...

08008be0 <_reclaim_reent>:
 8008be0:	4b2c      	ldr	r3, [pc, #176]	; (8008c94 <_reclaim_reent+0xb4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4283      	cmp	r3, r0
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	d051      	beq.n	8008c90 <_reclaim_reent+0xb0>
 8008bec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008bee:	b143      	cbz	r3, 8008c02 <_reclaim_reent+0x22>
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d14a      	bne.n	8008c8c <_reclaim_reent+0xac>
 8008bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	b111      	cbz	r1, 8008c02 <_reclaim_reent+0x22>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 f887 	bl	8008d10 <_free_r>
 8008c02:	6961      	ldr	r1, [r4, #20]
 8008c04:	b111      	cbz	r1, 8008c0c <_reclaim_reent+0x2c>
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f882 	bl	8008d10 <_free_r>
 8008c0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c0e:	b111      	cbz	r1, 8008c16 <_reclaim_reent+0x36>
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 f87d 	bl	8008d10 <_free_r>
 8008c16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c18:	b111      	cbz	r1, 8008c20 <_reclaim_reent+0x40>
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f878 	bl	8008d10 <_free_r>
 8008c20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008c22:	b111      	cbz	r1, 8008c2a <_reclaim_reent+0x4a>
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 f873 	bl	8008d10 <_free_r>
 8008c2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008c2c:	b111      	cbz	r1, 8008c34 <_reclaim_reent+0x54>
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f86e 	bl	8008d10 <_free_r>
 8008c34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008c36:	b111      	cbz	r1, 8008c3e <_reclaim_reent+0x5e>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 f869 	bl	8008d10 <_free_r>
 8008c3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008c40:	b111      	cbz	r1, 8008c48 <_reclaim_reent+0x68>
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 f864 	bl	8008d10 <_free_r>
 8008c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c4a:	b111      	cbz	r1, 8008c52 <_reclaim_reent+0x72>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 f85f 	bl	8008d10 <_free_r>
 8008c52:	69a3      	ldr	r3, [r4, #24]
 8008c54:	b1e3      	cbz	r3, 8008c90 <_reclaim_reent+0xb0>
 8008c56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4798      	blx	r3
 8008c5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c5e:	b1b9      	cbz	r1, 8008c90 <_reclaim_reent+0xb0>
 8008c60:	4620      	mov	r0, r4
 8008c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c66:	f7ff bfad 	b.w	8008bc4 <cleanup_glue>
 8008c6a:	5949      	ldr	r1, [r1, r5]
 8008c6c:	b941      	cbnz	r1, 8008c80 <_reclaim_reent+0xa0>
 8008c6e:	3504      	adds	r5, #4
 8008c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c72:	2d80      	cmp	r5, #128	; 0x80
 8008c74:	68d9      	ldr	r1, [r3, #12]
 8008c76:	d1f8      	bne.n	8008c6a <_reclaim_reent+0x8a>
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 f849 	bl	8008d10 <_free_r>
 8008c7e:	e7ba      	b.n	8008bf6 <_reclaim_reent+0x16>
 8008c80:	680e      	ldr	r6, [r1, #0]
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 f844 	bl	8008d10 <_free_r>
 8008c88:	4631      	mov	r1, r6
 8008c8a:	e7ef      	b.n	8008c6c <_reclaim_reent+0x8c>
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	e7ef      	b.n	8008c70 <_reclaim_reent+0x90>
 8008c90:	bd70      	pop	{r4, r5, r6, pc}
 8008c92:	bf00      	nop
 8008c94:	20000010 	.word	0x20000010

08008c98 <_sbrk_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_sbrk_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f8 fc50 	bl	8001548 <_sbrk>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_sbrk_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_sbrk_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	20001248 	.word	0x20001248

08008cb8 <siprintf>:
 8008cb8:	b40e      	push	{r1, r2, r3}
 8008cba:	b500      	push	{lr}
 8008cbc:	b09c      	sub	sp, #112	; 0x70
 8008cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008cc0:	9002      	str	r0, [sp, #8]
 8008cc2:	9006      	str	r0, [sp, #24]
 8008cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cc8:	4809      	ldr	r0, [pc, #36]	; (8008cf0 <siprintf+0x38>)
 8008cca:	9107      	str	r1, [sp, #28]
 8008ccc:	9104      	str	r1, [sp, #16]
 8008cce:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <siprintf+0x3c>)
 8008cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd4:	9105      	str	r1, [sp, #20]
 8008cd6:	6800      	ldr	r0, [r0, #0]
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	a902      	add	r1, sp, #8
 8008cdc:	f000 f8c4 	bl	8008e68 <_svfiprintf_r>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	b01c      	add	sp, #112	; 0x70
 8008ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cec:	b003      	add	sp, #12
 8008cee:	4770      	bx	lr
 8008cf0:	20000010 	.word	0x20000010
 8008cf4:	ffff0208 	.word	0xffff0208

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f7ff bef1 	b.w	8008ae0 <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20001240 	.word	0x20001240

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f7ff beec 	b.w	8008ae2 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20001240 	.word	0x20001240

08008d10 <_free_r>:
 8008d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d12:	2900      	cmp	r1, #0
 8008d14:	d048      	beq.n	8008da8 <_free_r+0x98>
 8008d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d1a:	9001      	str	r0, [sp, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d22:	bfb8      	it	lt
 8008d24:	18e4      	addlt	r4, r4, r3
 8008d26:	f7ff ffe7 	bl	8008cf8 <__malloc_lock>
 8008d2a:	4a20      	ldr	r2, [pc, #128]	; (8008dac <_free_r+0x9c>)
 8008d2c:	9801      	ldr	r0, [sp, #4]
 8008d2e:	6813      	ldr	r3, [r2, #0]
 8008d30:	4615      	mov	r5, r2
 8008d32:	b933      	cbnz	r3, 8008d42 <_free_r+0x32>
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	6014      	str	r4, [r2, #0]
 8008d38:	b003      	add	sp, #12
 8008d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d3e:	f7ff bfe1 	b.w	8008d04 <__malloc_unlock>
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	d90b      	bls.n	8008d5e <_free_r+0x4e>
 8008d46:	6821      	ldr	r1, [r4, #0]
 8008d48:	1862      	adds	r2, r4, r1
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	bf04      	itt	eq
 8008d4e:	681a      	ldreq	r2, [r3, #0]
 8008d50:	685b      	ldreq	r3, [r3, #4]
 8008d52:	6063      	str	r3, [r4, #4]
 8008d54:	bf04      	itt	eq
 8008d56:	1852      	addeq	r2, r2, r1
 8008d58:	6022      	streq	r2, [r4, #0]
 8008d5a:	602c      	str	r4, [r5, #0]
 8008d5c:	e7ec      	b.n	8008d38 <_free_r+0x28>
 8008d5e:	461a      	mov	r2, r3
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	b10b      	cbz	r3, 8008d68 <_free_r+0x58>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d9fa      	bls.n	8008d5e <_free_r+0x4e>
 8008d68:	6811      	ldr	r1, [r2, #0]
 8008d6a:	1855      	adds	r5, r2, r1
 8008d6c:	42a5      	cmp	r5, r4
 8008d6e:	d10b      	bne.n	8008d88 <_free_r+0x78>
 8008d70:	6824      	ldr	r4, [r4, #0]
 8008d72:	4421      	add	r1, r4
 8008d74:	1854      	adds	r4, r2, r1
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	6011      	str	r1, [r2, #0]
 8008d7a:	d1dd      	bne.n	8008d38 <_free_r+0x28>
 8008d7c:	681c      	ldr	r4, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	6053      	str	r3, [r2, #4]
 8008d82:	4421      	add	r1, r4
 8008d84:	6011      	str	r1, [r2, #0]
 8008d86:	e7d7      	b.n	8008d38 <_free_r+0x28>
 8008d88:	d902      	bls.n	8008d90 <_free_r+0x80>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	6003      	str	r3, [r0, #0]
 8008d8e:	e7d3      	b.n	8008d38 <_free_r+0x28>
 8008d90:	6825      	ldr	r5, [r4, #0]
 8008d92:	1961      	adds	r1, r4, r5
 8008d94:	428b      	cmp	r3, r1
 8008d96:	bf04      	itt	eq
 8008d98:	6819      	ldreq	r1, [r3, #0]
 8008d9a:	685b      	ldreq	r3, [r3, #4]
 8008d9c:	6063      	str	r3, [r4, #4]
 8008d9e:	bf04      	itt	eq
 8008da0:	1949      	addeq	r1, r1, r5
 8008da2:	6021      	streq	r1, [r4, #0]
 8008da4:	6054      	str	r4, [r2, #4]
 8008da6:	e7c7      	b.n	8008d38 <_free_r+0x28>
 8008da8:	b003      	add	sp, #12
 8008daa:	bd30      	pop	{r4, r5, pc}
 8008dac:	20001064 	.word	0x20001064

08008db0 <__ssputs_r>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	688e      	ldr	r6, [r1, #8]
 8008db6:	429e      	cmp	r6, r3
 8008db8:	4682      	mov	sl, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	4690      	mov	r8, r2
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	d838      	bhi.n	8008e34 <__ssputs_r+0x84>
 8008dc2:	898a      	ldrh	r2, [r1, #12]
 8008dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc8:	d032      	beq.n	8008e30 <__ssputs_r+0x80>
 8008dca:	6825      	ldr	r5, [r4, #0]
 8008dcc:	6909      	ldr	r1, [r1, #16]
 8008dce:	eba5 0901 	sub.w	r9, r5, r1
 8008dd2:	6965      	ldr	r5, [r4, #20]
 8008dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ddc:	3301      	adds	r3, #1
 8008dde:	444b      	add	r3, r9
 8008de0:	106d      	asrs	r5, r5, #1
 8008de2:	429d      	cmp	r5, r3
 8008de4:	bf38      	it	cc
 8008de6:	461d      	movcc	r5, r3
 8008de8:	0553      	lsls	r3, r2, #21
 8008dea:	d531      	bpl.n	8008e50 <__ssputs_r+0xa0>
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7ff fe8f 	bl	8008b10 <_malloc_r>
 8008df2:	4606      	mov	r6, r0
 8008df4:	b950      	cbnz	r0, 8008e0c <__ssputs_r+0x5c>
 8008df6:	230c      	movs	r3, #12
 8008df8:	f8ca 3000 	str.w	r3, [sl]
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	6921      	ldr	r1, [r4, #16]
 8008e0e:	464a      	mov	r2, r9
 8008e10:	f7ff fe68 	bl	8008ae4 <memcpy>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	6126      	str	r6, [r4, #16]
 8008e22:	6165      	str	r5, [r4, #20]
 8008e24:	444e      	add	r6, r9
 8008e26:	eba5 0509 	sub.w	r5, r5, r9
 8008e2a:	6026      	str	r6, [r4, #0]
 8008e2c:	60a5      	str	r5, [r4, #8]
 8008e2e:	463e      	mov	r6, r7
 8008e30:	42be      	cmp	r6, r7
 8008e32:	d900      	bls.n	8008e36 <__ssputs_r+0x86>
 8008e34:	463e      	mov	r6, r7
 8008e36:	4632      	mov	r2, r6
 8008e38:	6820      	ldr	r0, [r4, #0]
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	f000 faa8 	bl	8009390 <memmove>
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	4432      	add	r2, r6
 8008e48:	60a3      	str	r3, [r4, #8]
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	e7db      	b.n	8008e08 <__ssputs_r+0x58>
 8008e50:	462a      	mov	r2, r5
 8008e52:	f000 fab7 	bl	80093c4 <_realloc_r>
 8008e56:	4606      	mov	r6, r0
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d1e1      	bne.n	8008e20 <__ssputs_r+0x70>
 8008e5c:	6921      	ldr	r1, [r4, #16]
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f7ff ff56 	bl	8008d10 <_free_r>
 8008e64:	e7c7      	b.n	8008df6 <__ssputs_r+0x46>
	...

08008e68 <_svfiprintf_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	4698      	mov	r8, r3
 8008e6e:	898b      	ldrh	r3, [r1, #12]
 8008e70:	061b      	lsls	r3, r3, #24
 8008e72:	b09d      	sub	sp, #116	; 0x74
 8008e74:	4607      	mov	r7, r0
 8008e76:	460d      	mov	r5, r1
 8008e78:	4614      	mov	r4, r2
 8008e7a:	d50e      	bpl.n	8008e9a <_svfiprintf_r+0x32>
 8008e7c:	690b      	ldr	r3, [r1, #16]
 8008e7e:	b963      	cbnz	r3, 8008e9a <_svfiprintf_r+0x32>
 8008e80:	2140      	movs	r1, #64	; 0x40
 8008e82:	f7ff fe45 	bl	8008b10 <_malloc_r>
 8008e86:	6028      	str	r0, [r5, #0]
 8008e88:	6128      	str	r0, [r5, #16]
 8008e8a:	b920      	cbnz	r0, 8008e96 <_svfiprintf_r+0x2e>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	e0d1      	b.n	800903a <_svfiprintf_r+0x1d2>
 8008e96:	2340      	movs	r3, #64	; 0x40
 8008e98:	616b      	str	r3, [r5, #20]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9e:	2320      	movs	r3, #32
 8008ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea8:	2330      	movs	r3, #48	; 0x30
 8008eaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009054 <_svfiprintf_r+0x1ec>
 8008eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eb2:	f04f 0901 	mov.w	r9, #1
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebe:	b10a      	cbz	r2, 8008ec4 <_svfiprintf_r+0x5c>
 8008ec0:	2a25      	cmp	r2, #37	; 0x25
 8008ec2:	d1f9      	bne.n	8008eb8 <_svfiprintf_r+0x50>
 8008ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec8:	d00b      	beq.n	8008ee2 <_svfiprintf_r+0x7a>
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ff6d 	bl	8008db0 <__ssputs_r>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f000 80aa 	beq.w	8009030 <_svfiprintf_r+0x1c8>
 8008edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ede:	445a      	add	r2, fp
 8008ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80a2 	beq.w	8009030 <_svfiprintf_r+0x1c8>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef6:	f10a 0a01 	add.w	sl, sl, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f02:	931a      	str	r3, [sp, #104]	; 0x68
 8008f04:	4654      	mov	r4, sl
 8008f06:	2205      	movs	r2, #5
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	4851      	ldr	r0, [pc, #324]	; (8009054 <_svfiprintf_r+0x1ec>)
 8008f0e:	f7f7 f95f 	bl	80001d0 <memchr>
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	b9d8      	cbnz	r0, 8008f4e <_svfiprintf_r+0xe6>
 8008f16:	06d0      	lsls	r0, r2, #27
 8008f18:	bf44      	itt	mi
 8008f1a:	2320      	movmi	r3, #32
 8008f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f20:	0711      	lsls	r1, r2, #28
 8008f22:	bf44      	itt	mi
 8008f24:	232b      	movmi	r3, #43	; 0x2b
 8008f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f30:	d015      	beq.n	8008f5e <_svfiprintf_r+0xf6>
 8008f32:	9a07      	ldr	r2, [sp, #28]
 8008f34:	4654      	mov	r4, sl
 8008f36:	2000      	movs	r0, #0
 8008f38:	f04f 0c0a 	mov.w	ip, #10
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f42:	3b30      	subs	r3, #48	; 0x30
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d94e      	bls.n	8008fe6 <_svfiprintf_r+0x17e>
 8008f48:	b1b0      	cbz	r0, 8008f78 <_svfiprintf_r+0x110>
 8008f4a:	9207      	str	r2, [sp, #28]
 8008f4c:	e014      	b.n	8008f78 <_svfiprintf_r+0x110>
 8008f4e:	eba0 0308 	sub.w	r3, r0, r8
 8008f52:	fa09 f303 	lsl.w	r3, r9, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	46a2      	mov	sl, r4
 8008f5c:	e7d2      	b.n	8008f04 <_svfiprintf_r+0x9c>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9103      	str	r1, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfbb      	ittet	lt
 8008f6a:	425b      	neglt	r3, r3
 8008f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f70:	9307      	strge	r3, [sp, #28]
 8008f72:	9307      	strlt	r3, [sp, #28]
 8008f74:	bfb8      	it	lt
 8008f76:	9204      	strlt	r2, [sp, #16]
 8008f78:	7823      	ldrb	r3, [r4, #0]
 8008f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f7c:	d10c      	bne.n	8008f98 <_svfiprintf_r+0x130>
 8008f7e:	7863      	ldrb	r3, [r4, #1]
 8008f80:	2b2a      	cmp	r3, #42	; 0x2a
 8008f82:	d135      	bne.n	8008ff0 <_svfiprintf_r+0x188>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	1d1a      	adds	r2, r3, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	9203      	str	r2, [sp, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bfb8      	it	lt
 8008f90:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f94:	3402      	adds	r4, #2
 8008f96:	9305      	str	r3, [sp, #20]
 8008f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009064 <_svfiprintf_r+0x1fc>
 8008f9c:	7821      	ldrb	r1, [r4, #0]
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	f7f7 f915 	bl	80001d0 <memchr>
 8008fa6:	b140      	cbz	r0, 8008fba <_svfiprintf_r+0x152>
 8008fa8:	2340      	movs	r3, #64	; 0x40
 8008faa:	eba0 000a 	sub.w	r0, r0, sl
 8008fae:	fa03 f000 	lsl.w	r0, r3, r0
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	4303      	orrs	r3, r0
 8008fb6:	3401      	adds	r4, #1
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbe:	4826      	ldr	r0, [pc, #152]	; (8009058 <_svfiprintf_r+0x1f0>)
 8008fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fc4:	2206      	movs	r2, #6
 8008fc6:	f7f7 f903 	bl	80001d0 <memchr>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d038      	beq.n	8009040 <_svfiprintf_r+0x1d8>
 8008fce:	4b23      	ldr	r3, [pc, #140]	; (800905c <_svfiprintf_r+0x1f4>)
 8008fd0:	bb1b      	cbnz	r3, 800901a <_svfiprintf_r+0x1b2>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	3307      	adds	r3, #7
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	3308      	adds	r3, #8
 8008fdc:	9303      	str	r3, [sp, #12]
 8008fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe0:	4433      	add	r3, r6
 8008fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe4:	e767      	b.n	8008eb6 <_svfiprintf_r+0x4e>
 8008fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fea:	460c      	mov	r4, r1
 8008fec:	2001      	movs	r0, #1
 8008fee:	e7a5      	b.n	8008f3c <_svfiprintf_r+0xd4>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f04f 0c0a 	mov.w	ip, #10
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009002:	3a30      	subs	r2, #48	; 0x30
 8009004:	2a09      	cmp	r2, #9
 8009006:	d903      	bls.n	8009010 <_svfiprintf_r+0x1a8>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0c5      	beq.n	8008f98 <_svfiprintf_r+0x130>
 800900c:	9105      	str	r1, [sp, #20]
 800900e:	e7c3      	b.n	8008f98 <_svfiprintf_r+0x130>
 8009010:	fb0c 2101 	mla	r1, ip, r1, r2
 8009014:	4604      	mov	r4, r0
 8009016:	2301      	movs	r3, #1
 8009018:	e7f0      	b.n	8008ffc <_svfiprintf_r+0x194>
 800901a:	ab03      	add	r3, sp, #12
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	462a      	mov	r2, r5
 8009020:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <_svfiprintf_r+0x1f8>)
 8009022:	a904      	add	r1, sp, #16
 8009024:	4638      	mov	r0, r7
 8009026:	f3af 8000 	nop.w
 800902a:	1c42      	adds	r2, r0, #1
 800902c:	4606      	mov	r6, r0
 800902e:	d1d6      	bne.n	8008fde <_svfiprintf_r+0x176>
 8009030:	89ab      	ldrh	r3, [r5, #12]
 8009032:	065b      	lsls	r3, r3, #25
 8009034:	f53f af2c 	bmi.w	8008e90 <_svfiprintf_r+0x28>
 8009038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800903a:	b01d      	add	sp, #116	; 0x74
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009040:	ab03      	add	r3, sp, #12
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	462a      	mov	r2, r5
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <_svfiprintf_r+0x1f8>)
 8009048:	a904      	add	r1, sp, #16
 800904a:	4638      	mov	r0, r7
 800904c:	f000 f87a 	bl	8009144 <_printf_i>
 8009050:	e7eb      	b.n	800902a <_svfiprintf_r+0x1c2>
 8009052:	bf00      	nop
 8009054:	0800954c 	.word	0x0800954c
 8009058:	08009556 	.word	0x08009556
 800905c:	00000000 	.word	0x00000000
 8009060:	08008db1 	.word	0x08008db1
 8009064:	08009552 	.word	0x08009552

08009068 <_printf_common>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	4616      	mov	r6, r2
 800906e:	4699      	mov	r9, r3
 8009070:	688a      	ldr	r2, [r1, #8]
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009078:	4293      	cmp	r3, r2
 800907a:	bfb8      	it	lt
 800907c:	4613      	movlt	r3, r2
 800907e:	6033      	str	r3, [r6, #0]
 8009080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009084:	4607      	mov	r7, r0
 8009086:	460c      	mov	r4, r1
 8009088:	b10a      	cbz	r2, 800908e <_printf_common+0x26>
 800908a:	3301      	adds	r3, #1
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	0699      	lsls	r1, r3, #26
 8009092:	bf42      	ittt	mi
 8009094:	6833      	ldrmi	r3, [r6, #0]
 8009096:	3302      	addmi	r3, #2
 8009098:	6033      	strmi	r3, [r6, #0]
 800909a:	6825      	ldr	r5, [r4, #0]
 800909c:	f015 0506 	ands.w	r5, r5, #6
 80090a0:	d106      	bne.n	80090b0 <_printf_common+0x48>
 80090a2:	f104 0a19 	add.w	sl, r4, #25
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	6832      	ldr	r2, [r6, #0]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dc26      	bgt.n	80090fe <_printf_common+0x96>
 80090b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b4:	1e13      	subs	r3, r2, #0
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	0692      	lsls	r2, r2, #26
 80090be:	d42b      	bmi.n	8009118 <_printf_common+0xb0>
 80090c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c4:	4649      	mov	r1, r9
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d01e      	beq.n	800910c <_printf_common+0xa4>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	68e5      	ldr	r5, [r4, #12]
 80090d2:	6832      	ldr	r2, [r6, #0]
 80090d4:	f003 0306 	and.w	r3, r3, #6
 80090d8:	2b04      	cmp	r3, #4
 80090da:	bf08      	it	eq
 80090dc:	1aad      	subeq	r5, r5, r2
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	6922      	ldr	r2, [r4, #16]
 80090e2:	bf0c      	ite	eq
 80090e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e8:	2500      	movne	r5, #0
 80090ea:	4293      	cmp	r3, r2
 80090ec:	bfc4      	itt	gt
 80090ee:	1a9b      	subgt	r3, r3, r2
 80090f0:	18ed      	addgt	r5, r5, r3
 80090f2:	2600      	movs	r6, #0
 80090f4:	341a      	adds	r4, #26
 80090f6:	42b5      	cmp	r5, r6
 80090f8:	d11a      	bne.n	8009130 <_printf_common+0xc8>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e008      	b.n	8009110 <_printf_common+0xa8>
 80090fe:	2301      	movs	r3, #1
 8009100:	4652      	mov	r2, sl
 8009102:	4649      	mov	r1, r9
 8009104:	4638      	mov	r0, r7
 8009106:	47c0      	blx	r8
 8009108:	3001      	adds	r0, #1
 800910a:	d103      	bne.n	8009114 <_printf_common+0xac>
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009114:	3501      	adds	r5, #1
 8009116:	e7c6      	b.n	80090a6 <_printf_common+0x3e>
 8009118:	18e1      	adds	r1, r4, r3
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	2030      	movs	r0, #48	; 0x30
 800911e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009122:	4422      	add	r2, r4
 8009124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800912c:	3302      	adds	r3, #2
 800912e:	e7c7      	b.n	80090c0 <_printf_common+0x58>
 8009130:	2301      	movs	r3, #1
 8009132:	4622      	mov	r2, r4
 8009134:	4649      	mov	r1, r9
 8009136:	4638      	mov	r0, r7
 8009138:	47c0      	blx	r8
 800913a:	3001      	adds	r0, #1
 800913c:	d0e6      	beq.n	800910c <_printf_common+0xa4>
 800913e:	3601      	adds	r6, #1
 8009140:	e7d9      	b.n	80090f6 <_printf_common+0x8e>
	...

08009144 <_printf_i>:
 8009144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	4691      	mov	r9, r2
 800914c:	7e27      	ldrb	r7, [r4, #24]
 800914e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009150:	2f78      	cmp	r7, #120	; 0x78
 8009152:	4680      	mov	r8, r0
 8009154:	469a      	mov	sl, r3
 8009156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800915a:	d807      	bhi.n	800916c <_printf_i+0x28>
 800915c:	2f62      	cmp	r7, #98	; 0x62
 800915e:	d80a      	bhi.n	8009176 <_printf_i+0x32>
 8009160:	2f00      	cmp	r7, #0
 8009162:	f000 80d8 	beq.w	8009316 <_printf_i+0x1d2>
 8009166:	2f58      	cmp	r7, #88	; 0x58
 8009168:	f000 80a3 	beq.w	80092b2 <_printf_i+0x16e>
 800916c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009174:	e03a      	b.n	80091ec <_printf_i+0xa8>
 8009176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800917a:	2b15      	cmp	r3, #21
 800917c:	d8f6      	bhi.n	800916c <_printf_i+0x28>
 800917e:	a001      	add	r0, pc, #4	; (adr r0, 8009184 <_printf_i+0x40>)
 8009180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009184:	080091dd 	.word	0x080091dd
 8009188:	080091f1 	.word	0x080091f1
 800918c:	0800916d 	.word	0x0800916d
 8009190:	0800916d 	.word	0x0800916d
 8009194:	0800916d 	.word	0x0800916d
 8009198:	0800916d 	.word	0x0800916d
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	0800916d 	.word	0x0800916d
 80091a4:	0800916d 	.word	0x0800916d
 80091a8:	0800916d 	.word	0x0800916d
 80091ac:	0800916d 	.word	0x0800916d
 80091b0:	080092fd 	.word	0x080092fd
 80091b4:	08009221 	.word	0x08009221
 80091b8:	080092df 	.word	0x080092df
 80091bc:	0800916d 	.word	0x0800916d
 80091c0:	0800916d 	.word	0x0800916d
 80091c4:	0800931f 	.word	0x0800931f
 80091c8:	0800916d 	.word	0x0800916d
 80091cc:	08009221 	.word	0x08009221
 80091d0:	0800916d 	.word	0x0800916d
 80091d4:	0800916d 	.word	0x0800916d
 80091d8:	080092e7 	.word	0x080092e7
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	1d1a      	adds	r2, r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	600a      	str	r2, [r1, #0]
 80091e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091ec:	2301      	movs	r3, #1
 80091ee:	e0a3      	b.n	8009338 <_printf_i+0x1f4>
 80091f0:	6825      	ldr	r5, [r4, #0]
 80091f2:	6808      	ldr	r0, [r1, #0]
 80091f4:	062e      	lsls	r6, r5, #24
 80091f6:	f100 0304 	add.w	r3, r0, #4
 80091fa:	d50a      	bpl.n	8009212 <_printf_i+0xce>
 80091fc:	6805      	ldr	r5, [r0, #0]
 80091fe:	600b      	str	r3, [r1, #0]
 8009200:	2d00      	cmp	r5, #0
 8009202:	da03      	bge.n	800920c <_printf_i+0xc8>
 8009204:	232d      	movs	r3, #45	; 0x2d
 8009206:	426d      	negs	r5, r5
 8009208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800920c:	485e      	ldr	r0, [pc, #376]	; (8009388 <_printf_i+0x244>)
 800920e:	230a      	movs	r3, #10
 8009210:	e019      	b.n	8009246 <_printf_i+0x102>
 8009212:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009216:	6805      	ldr	r5, [r0, #0]
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	bf18      	it	ne
 800921c:	b22d      	sxthne	r5, r5
 800921e:	e7ef      	b.n	8009200 <_printf_i+0xbc>
 8009220:	680b      	ldr	r3, [r1, #0]
 8009222:	6825      	ldr	r5, [r4, #0]
 8009224:	1d18      	adds	r0, r3, #4
 8009226:	6008      	str	r0, [r1, #0]
 8009228:	0628      	lsls	r0, r5, #24
 800922a:	d501      	bpl.n	8009230 <_printf_i+0xec>
 800922c:	681d      	ldr	r5, [r3, #0]
 800922e:	e002      	b.n	8009236 <_printf_i+0xf2>
 8009230:	0669      	lsls	r1, r5, #25
 8009232:	d5fb      	bpl.n	800922c <_printf_i+0xe8>
 8009234:	881d      	ldrh	r5, [r3, #0]
 8009236:	4854      	ldr	r0, [pc, #336]	; (8009388 <_printf_i+0x244>)
 8009238:	2f6f      	cmp	r7, #111	; 0x6f
 800923a:	bf0c      	ite	eq
 800923c:	2308      	moveq	r3, #8
 800923e:	230a      	movne	r3, #10
 8009240:	2100      	movs	r1, #0
 8009242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009246:	6866      	ldr	r6, [r4, #4]
 8009248:	60a6      	str	r6, [r4, #8]
 800924a:	2e00      	cmp	r6, #0
 800924c:	bfa2      	ittt	ge
 800924e:	6821      	ldrge	r1, [r4, #0]
 8009250:	f021 0104 	bicge.w	r1, r1, #4
 8009254:	6021      	strge	r1, [r4, #0]
 8009256:	b90d      	cbnz	r5, 800925c <_printf_i+0x118>
 8009258:	2e00      	cmp	r6, #0
 800925a:	d04d      	beq.n	80092f8 <_printf_i+0x1b4>
 800925c:	4616      	mov	r6, r2
 800925e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009262:	fb03 5711 	mls	r7, r3, r1, r5
 8009266:	5dc7      	ldrb	r7, [r0, r7]
 8009268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800926c:	462f      	mov	r7, r5
 800926e:	42bb      	cmp	r3, r7
 8009270:	460d      	mov	r5, r1
 8009272:	d9f4      	bls.n	800925e <_printf_i+0x11a>
 8009274:	2b08      	cmp	r3, #8
 8009276:	d10b      	bne.n	8009290 <_printf_i+0x14c>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	07df      	lsls	r7, r3, #31
 800927c:	d508      	bpl.n	8009290 <_printf_i+0x14c>
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	6861      	ldr	r1, [r4, #4]
 8009282:	4299      	cmp	r1, r3
 8009284:	bfde      	ittt	le
 8009286:	2330      	movle	r3, #48	; 0x30
 8009288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800928c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009290:	1b92      	subs	r2, r2, r6
 8009292:	6122      	str	r2, [r4, #16]
 8009294:	f8cd a000 	str.w	sl, [sp]
 8009298:	464b      	mov	r3, r9
 800929a:	aa03      	add	r2, sp, #12
 800929c:	4621      	mov	r1, r4
 800929e:	4640      	mov	r0, r8
 80092a0:	f7ff fee2 	bl	8009068 <_printf_common>
 80092a4:	3001      	adds	r0, #1
 80092a6:	d14c      	bne.n	8009342 <_printf_i+0x1fe>
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	b004      	add	sp, #16
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	4835      	ldr	r0, [pc, #212]	; (8009388 <_printf_i+0x244>)
 80092b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	680e      	ldr	r6, [r1, #0]
 80092bc:	061f      	lsls	r7, r3, #24
 80092be:	f856 5b04 	ldr.w	r5, [r6], #4
 80092c2:	600e      	str	r6, [r1, #0]
 80092c4:	d514      	bpl.n	80092f0 <_printf_i+0x1ac>
 80092c6:	07d9      	lsls	r1, r3, #31
 80092c8:	bf44      	itt	mi
 80092ca:	f043 0320 	orrmi.w	r3, r3, #32
 80092ce:	6023      	strmi	r3, [r4, #0]
 80092d0:	b91d      	cbnz	r5, 80092da <_printf_i+0x196>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	f023 0320 	bic.w	r3, r3, #32
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	2310      	movs	r3, #16
 80092dc:	e7b0      	b.n	8009240 <_printf_i+0xfc>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	f043 0320 	orr.w	r3, r3, #32
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	2378      	movs	r3, #120	; 0x78
 80092e8:	4828      	ldr	r0, [pc, #160]	; (800938c <_printf_i+0x248>)
 80092ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092ee:	e7e3      	b.n	80092b8 <_printf_i+0x174>
 80092f0:	065e      	lsls	r6, r3, #25
 80092f2:	bf48      	it	mi
 80092f4:	b2ad      	uxthmi	r5, r5
 80092f6:	e7e6      	b.n	80092c6 <_printf_i+0x182>
 80092f8:	4616      	mov	r6, r2
 80092fa:	e7bb      	b.n	8009274 <_printf_i+0x130>
 80092fc:	680b      	ldr	r3, [r1, #0]
 80092fe:	6826      	ldr	r6, [r4, #0]
 8009300:	6960      	ldr	r0, [r4, #20]
 8009302:	1d1d      	adds	r5, r3, #4
 8009304:	600d      	str	r5, [r1, #0]
 8009306:	0635      	lsls	r5, r6, #24
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	d501      	bpl.n	8009310 <_printf_i+0x1cc>
 800930c:	6018      	str	r0, [r3, #0]
 800930e:	e002      	b.n	8009316 <_printf_i+0x1d2>
 8009310:	0671      	lsls	r1, r6, #25
 8009312:	d5fb      	bpl.n	800930c <_printf_i+0x1c8>
 8009314:	8018      	strh	r0, [r3, #0]
 8009316:	2300      	movs	r3, #0
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	4616      	mov	r6, r2
 800931c:	e7ba      	b.n	8009294 <_printf_i+0x150>
 800931e:	680b      	ldr	r3, [r1, #0]
 8009320:	1d1a      	adds	r2, r3, #4
 8009322:	600a      	str	r2, [r1, #0]
 8009324:	681e      	ldr	r6, [r3, #0]
 8009326:	6862      	ldr	r2, [r4, #4]
 8009328:	2100      	movs	r1, #0
 800932a:	4630      	mov	r0, r6
 800932c:	f7f6 ff50 	bl	80001d0 <memchr>
 8009330:	b108      	cbz	r0, 8009336 <_printf_i+0x1f2>
 8009332:	1b80      	subs	r0, r0, r6
 8009334:	6060      	str	r0, [r4, #4]
 8009336:	6863      	ldr	r3, [r4, #4]
 8009338:	6123      	str	r3, [r4, #16]
 800933a:	2300      	movs	r3, #0
 800933c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009340:	e7a8      	b.n	8009294 <_printf_i+0x150>
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	4632      	mov	r2, r6
 8009346:	4649      	mov	r1, r9
 8009348:	4640      	mov	r0, r8
 800934a:	47d0      	blx	sl
 800934c:	3001      	adds	r0, #1
 800934e:	d0ab      	beq.n	80092a8 <_printf_i+0x164>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	079b      	lsls	r3, r3, #30
 8009354:	d413      	bmi.n	800937e <_printf_i+0x23a>
 8009356:	68e0      	ldr	r0, [r4, #12]
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	4298      	cmp	r0, r3
 800935c:	bfb8      	it	lt
 800935e:	4618      	movlt	r0, r3
 8009360:	e7a4      	b.n	80092ac <_printf_i+0x168>
 8009362:	2301      	movs	r3, #1
 8009364:	4632      	mov	r2, r6
 8009366:	4649      	mov	r1, r9
 8009368:	4640      	mov	r0, r8
 800936a:	47d0      	blx	sl
 800936c:	3001      	adds	r0, #1
 800936e:	d09b      	beq.n	80092a8 <_printf_i+0x164>
 8009370:	3501      	adds	r5, #1
 8009372:	68e3      	ldr	r3, [r4, #12]
 8009374:	9903      	ldr	r1, [sp, #12]
 8009376:	1a5b      	subs	r3, r3, r1
 8009378:	42ab      	cmp	r3, r5
 800937a:	dcf2      	bgt.n	8009362 <_printf_i+0x21e>
 800937c:	e7eb      	b.n	8009356 <_printf_i+0x212>
 800937e:	2500      	movs	r5, #0
 8009380:	f104 0619 	add.w	r6, r4, #25
 8009384:	e7f5      	b.n	8009372 <_printf_i+0x22e>
 8009386:	bf00      	nop
 8009388:	0800955d 	.word	0x0800955d
 800938c:	0800956e 	.word	0x0800956e

08009390 <memmove>:
 8009390:	4288      	cmp	r0, r1
 8009392:	b510      	push	{r4, lr}
 8009394:	eb01 0402 	add.w	r4, r1, r2
 8009398:	d902      	bls.n	80093a0 <memmove+0x10>
 800939a:	4284      	cmp	r4, r0
 800939c:	4623      	mov	r3, r4
 800939e:	d807      	bhi.n	80093b0 <memmove+0x20>
 80093a0:	1e43      	subs	r3, r0, #1
 80093a2:	42a1      	cmp	r1, r4
 80093a4:	d008      	beq.n	80093b8 <memmove+0x28>
 80093a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ae:	e7f8      	b.n	80093a2 <memmove+0x12>
 80093b0:	4402      	add	r2, r0
 80093b2:	4601      	mov	r1, r0
 80093b4:	428a      	cmp	r2, r1
 80093b6:	d100      	bne.n	80093ba <memmove+0x2a>
 80093b8:	bd10      	pop	{r4, pc}
 80093ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093c2:	e7f7      	b.n	80093b4 <memmove+0x24>

080093c4 <_realloc_r>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4607      	mov	r7, r0
 80093c8:	4614      	mov	r4, r2
 80093ca:	460e      	mov	r6, r1
 80093cc:	b921      	cbnz	r1, 80093d8 <_realloc_r+0x14>
 80093ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093d2:	4611      	mov	r1, r2
 80093d4:	f7ff bb9c 	b.w	8008b10 <_malloc_r>
 80093d8:	b922      	cbnz	r2, 80093e4 <_realloc_r+0x20>
 80093da:	f7ff fc99 	bl	8008d10 <_free_r>
 80093de:	4625      	mov	r5, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e4:	f000 f814 	bl	8009410 <_malloc_usable_size_r>
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d20f      	bcs.n	800940c <_realloc_r+0x48>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4638      	mov	r0, r7
 80093f0:	f7ff fb8e 	bl	8008b10 <_malloc_r>
 80093f4:	4605      	mov	r5, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0f2      	beq.n	80093e0 <_realloc_r+0x1c>
 80093fa:	4631      	mov	r1, r6
 80093fc:	4622      	mov	r2, r4
 80093fe:	f7ff fb71 	bl	8008ae4 <memcpy>
 8009402:	4631      	mov	r1, r6
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff fc83 	bl	8008d10 <_free_r>
 800940a:	e7e9      	b.n	80093e0 <_realloc_r+0x1c>
 800940c:	4635      	mov	r5, r6
 800940e:	e7e7      	b.n	80093e0 <_realloc_r+0x1c>

08009410 <_malloc_usable_size_r>:
 8009410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009414:	1f18      	subs	r0, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfbc      	itt	lt
 800941a:	580b      	ldrlt	r3, [r1, r0]
 800941c:	18c0      	addlt	r0, r0, r3
 800941e:	4770      	bx	lr

08009420 <_init>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr

0800942c <_fini>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr
